
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/multiple_kernel_ridge/plot_mkr_1_sklearn_api.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_1_sklearn_api.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_multiple_kernel_ridge_plot_mkr_1_sklearn_api.py:


Multiple-kernel ridge with scikit-learn API
===========================================
This example demonstrates how to solve multiple kernel ridge regression, using
scikit-learn API.

.. GENERATED FROM PYTHON SOURCE LINES 7-22

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt

    from himalaya.backend import set_backend
    from himalaya.kernel_ridge import KernelRidgeCV
    from himalaya.kernel_ridge import MultipleKernelRidgeCV
    from himalaya.kernel_ridge import Kernelizer
    from himalaya.kernel_ridge import ColumnKernelizer
    from himalaya.utils import generate_multikernel_dataset

    from sklearn.pipeline import make_pipeline
    from sklearn import set_config
    set_config(display='diagram')








.. GENERATED FROM PYTHON SOURCE LINES 24-28

In this example, we use the ``torch_cuda`` backend.

Torch can perform computations both on CPU and GPU. To use CPU, use the
"torch" backend, to use GPU, use the "torch_cuda" backend.

.. GENERATED FROM PYTHON SOURCE LINES 28-31

.. code-block:: default


    backend = set_backend("torch_cuda", on_error="warn")








.. GENERATED FROM PYTHON SOURCE LINES 32-38

Generate a random dataset
-------------------------
- X_train : array of shape (n_samples_train, n_features)
- X_test : array of shape (n_samples_test, n_features)
- Y_train : array of shape (n_samples_train, n_targets)
- Y_test : array of shape (n_samples_test, n_targets)

.. GENERATED FROM PYTHON SOURCE LINES 38-47

.. code-block:: default


    (X_train, X_test, Y_train, Y_test, kernel_weights,
     n_features_list) = generate_multikernel_dataset(n_kernels=3, n_targets=50,
                                                     n_samples_train=600,
                                                     n_samples_test=300,
                                                     random_state=42)

    feature_names = [f"Feature space {ii}" for ii in range(len(n_features_list))]








.. GENERATED FROM PYTHON SOURCE LINES 48-51

We could precompute the kernels by hand on ``Xs_train``, as done in
``plot_mkr_random_search.py``. Instead, here we use the ``ColumnKernelizer``
to make a ``scikit-learn`` ``Pipeline``.

.. GENERATED FROM PYTHON SOURCE LINES 51-59

.. code-block:: default


    # Find the start and end of each feature space X in Xs
    start_and_end = np.concatenate([[0], np.cumsum(n_features_list)])
    slices = [
        slice(start, end)
        for start, end in zip(start_and_end[:-1], start_and_end[1:])
    ]








.. GENERATED FROM PYTHON SOURCE LINES 60-64

Create a different ``Kernelizer`` for each feature space. Here we use a
linear kernel for all feature spaces, but ``ColumnKernelizer`` accepts any
``Kernelizer``, or ``scikit-learn`` ``Pipeline`` ending with a
``Kernelizer``.

.. GENERATED FROM PYTHON SOURCE LINES 64-71

.. code-block:: default

    kernelizers = [(name, Kernelizer(), slice_)
                   for name, slice_ in zip(feature_names, slices)]
    column_kernelizer = ColumnKernelizer(kernelizers)

    # Note that ``ColumnKernelizer`` has a parameter ``n_jobs`` to parallelize each
    # kernelizer, yet such parallelism does not work with GPU arrays.








.. GENERATED FROM PYTHON SOURCE LINES 72-78

Define the model
----------------

The class takes a number of common parameters during initialization, such as
`kernels` or `solver`. Since the solver parameters might be different
depending on the solver, they can be passed in the `solver_params` parameter.

.. GENERATED FROM PYTHON SOURCE LINES 80-82

Here we use the "random_search" solver.
We can check its specific parameters in the function docstring:

.. GENERATED FROM PYTHON SOURCE LINES 82-86

.. code-block:: default

    solver_function = MultipleKernelRidgeCV.ALL_SOLVERS["random_search"]
    print("Docstring of the function %s:" % solver_function.__name__)
    print(solver_function.__doc__)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Docstring of the function solve_multiple_kernel_ridge_random_search:
    Solve multiple kernel ridge regression using random search.

        Parameters
        ----------
        Ks : array of shape (n_kernels, n_samples, n_samples)
            Input kernels.
        Y : array of shape (n_samples, n_targets)
            Target data.
        n_iter : int, or array of shape (n_iter, n_kernels)
            Number of kernel weights combination to search.
            If an array is given, the solver uses it as the list of kernel weights
            to try, instead of sampling from a Dirichlet distribution. Examples:
              - `n_iter=np.eye(n_kernels)` implement a winner-take-all strategy
                over kernels.
              - `n_iter=np.ones((1, n_kernels))/n_kernels` solves a (standard)
                kernel ridge regression.
        concentration : float, or list of float
            Concentration parameters of the Dirichlet distribution.
            If a list, iteratively cycle through the list.
            Not used if n_iter is an array.
        alphas : float or array of shape (n_alphas, )
            Range of ridge regularization parameter.
        score_func : callable
            Function used to compute the score of predictions versus Y.
        cv : int or scikit-learn splitter
            Cross-validation splitter. If an int, KFold is used.
        fit_intercept : boolean
            Whether to fit an intercept. If False, Ks should be centered
            (see KernelCenterer), and Y must be zero-mean over samples.
            Only available if return_weights == 'dual'.
        return_weights : None, 'primal', or 'dual'
            Whether to refit on the entire dataset and return the weights.
        Xs : array of shape (n_kernels, n_samples, n_features) or None
            Necessary if return_weights == 'primal'.
        local_alpha : bool
            If True, alphas are selected per target, else shared over all targets.
        jitter_alphas : bool
            If True, alphas range is slightly jittered for each gamma.
        random_state : int, or None
            Random generator seed. Use an int for deterministic search.
        n_targets_batch : int or None
            Size of the batch for over targets during cross-validation.
            Used for memory reasons. If None, uses all n_targets at once.
        n_targets_batch_refit : int or None
            Size of the batch for over targets during refit.
            Used for memory reasons. If None, uses all n_targets at once.
        n_alphas_batch : int or None
            Size of the batch for over alphas. Used for memory reasons.
            If None, uses all n_alphas at once.
        progress_bar : bool
            If True, display a progress bar over gammas.
        Ks_in_cpu : bool
            If True, keep Ks in CPU memory to limit GPU memory (slower).
            This feature is not available through the scikit-learn API.
        conservative : bool
            If True, when selecting the hyperparameter alpha, take the largest one
            that is less than one standard deviation away from the best.
            If False, take the best.
        Y_in_cpu : bool
            If True, keep the target values ``Y`` in CPU memory (slower).
        diagonalize_method : str in {"eigh", "svd"}
            Method used to diagonalize the kernel.
        return_alphas : bool
            If True, return the best alpha value for each target.

        Returns
        -------
        deltas : array of shape (n_kernels, n_targets)
            Best log kernel weights for each target.
        refit_weights : array or None
            Refit regression weights on the entire dataset, using selected best
            hyperparameters. Refit weights are always stored on CPU memory.
            If return_weights == 'primal', shape is (n_features, n_targets),
            if return_weights == 'dual', shape is (n_samples, n_targets),
            else, None.
        cv_scores : array of shape (n_iter, n_targets)
            Cross-validation scores per iteration, averaged over splits, for the
            best alpha. Cross-validation scores will always be on CPU memory.
        best_alphas : array of shape (n_targets, )
            Best alpha value per target. Only returned if return_alphas is True.
        intercept : array of shape (n_targets,)
            Intercept. Only returned when fit_intercept is True.
    




.. GENERATED FROM PYTHON SOURCE LINES 87-90

We use 100 iterations to have a reasonably fast example (~40 sec).
To have a better convergence, we probably need more iterations.
Note that there is currently no stopping criterion in this method.

.. GENERATED FROM PYTHON SOURCE LINES 90-92

.. code-block:: default

    n_iter = 100








.. GENERATED FROM PYTHON SOURCE LINES 93-94

Grid of regularization parameters.

.. GENERATED FROM PYTHON SOURCE LINES 94-96

.. code-block:: default

    alphas = np.logspace(-10, 10, 41)








.. GENERATED FROM PYTHON SOURCE LINES 97-100

Batch parameters are used to reduce the necessary GPU memory. A larger value
will be a bit faster, but the solver might crash if it runs out of memory.
Optimal values depend on the size of your dataset.

.. GENERATED FROM PYTHON SOURCE LINES 100-113

.. code-block:: default

    n_targets_batch = 1000
    n_alphas_batch = 20
    n_targets_batch_refit = 200

    solver_params = dict(n_iter=n_iter, alphas=alphas,
                         n_targets_batch=n_targets_batch,
                         n_alphas_batch=n_alphas_batch,
                         n_targets_batch_refit=n_targets_batch_refit,
                         jitter_alphas=True)

    model = MultipleKernelRidgeCV(kernels="precomputed", solver="random_search",
                                  solver_params=solver_params)








.. GENERATED FROM PYTHON SOURCE LINES 114-115

Define and fit the pipeline

.. GENERATED FROM PYTHON SOURCE LINES 115-118

.. code-block:: default

    pipe = make_pipeline(column_kernelizer, model)
    pipe.fit(X_train, Y_train)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [                                        ] 0% | 0.00 sec | 100 random sampling with cv |     [                                        ] 1% | 0.11 sec | 100 random sampling with cv |     [                                        ] 2% | 0.23 sec | 100 random sampling with cv |     [.                                       ] 3% | 0.34 sec | 100 random sampling with cv |     [.                                       ] 4% | 0.45 sec | 100 random sampling with cv |     [..                                      ] 5% | 0.56 sec | 100 random sampling with cv |     [..                                      ] 6% | 0.68 sec | 100 random sampling with cv |     [..                                      ] 7% | 0.79 sec | 100 random sampling with cv |     [...                                     ] 8% | 0.90 sec | 100 random sampling with cv |     [...                                     ] 9% | 1.02 sec | 100 random sampling with cv |     [....                                    ] 10% | 1.13 sec | 100 random sampling with cv |     [....                                    ] 11% | 1.24 sec | 100 random sampling with cv |     [....                                    ] 12% | 1.35 sec | 100 random sampling with cv |     [.....                                   ] 13% | 1.47 sec | 100 random sampling with cv |     [.....                                   ] 14% | 1.58 sec | 100 random sampling with cv |     [......                                  ] 15% | 1.69 sec | 100 random sampling with cv |     [......                                  ] 16% | 1.81 sec | 100 random sampling with cv |     [......                                  ] 17% | 1.92 sec | 100 random sampling with cv |     [.......                                 ] 18% | 2.03 sec | 100 random sampling with cv |     [.......                                 ] 19% | 2.14 sec | 100 random sampling with cv |     [........                                ] 20% | 2.26 sec | 100 random sampling with cv |     [........                                ] 21% | 2.37 sec | 100 random sampling with cv |     [........                                ] 22% | 2.45 sec | 100 random sampling with cv |     [.........                               ] 23% | 2.56 sec | 100 random sampling with cv |     [.........                               ] 24% | 2.65 sec | 100 random sampling with cv |     [..........                              ] 25% | 2.73 sec | 100 random sampling with cv |     [..........                              ] 26% | 2.81 sec | 100 random sampling with cv |     [..........                              ] 27% | 2.93 sec | 100 random sampling with cv |     [...........                             ] 28% | 3.04 sec | 100 random sampling with cv |     [...........                             ] 29% | 3.15 sec | 100 random sampling with cv |     [............                            ] 30% | 3.26 sec | 100 random sampling with cv |     [............                            ] 31% | 3.38 sec | 100 random sampling with cv |     [............                            ] 32% | 3.49 sec | 100 random sampling with cv |     [.............                           ] 33% | 3.60 sec | 100 random sampling with cv |     [.............                           ] 34% | 3.72 sec | 100 random sampling with cv |     [..............                          ] 35% | 3.83 sec | 100 random sampling with cv |     [..............                          ] 36% | 3.94 sec | 100 random sampling with cv |     [..............                          ] 37% | 4.06 sec | 100 random sampling with cv |     [...............                         ] 38% | 4.17 sec | 100 random sampling with cv |     [...............                         ] 39% | 4.25 sec | 100 random sampling with cv |     [................                        ] 40% | 4.36 sec | 100 random sampling with cv |     [................                        ] 41% | 4.48 sec | 100 random sampling with cv |     [................                        ] 42% | 4.56 sec | 100 random sampling with cv |     [.................                       ] 43% | 4.67 sec | 100 random sampling with cv |     [.................                       ] 44% | 4.76 sec | 100 random sampling with cv |     [..................                      ] 45% | 4.87 sec | 100 random sampling with cv |     [..................                      ] 46% | 4.98 sec | 100 random sampling with cv |     [..................                      ] 47% | 5.09 sec | 100 random sampling with cv |     [...................                     ] 48% | 5.21 sec | 100 random sampling with cv |     [...................                     ] 49% | 5.32 sec | 100 random sampling with cv |     [....................                    ] 50% | 5.40 sec | 100 random sampling with cv |     [....................                    ] 51% | 5.49 sec | 100 random sampling with cv |     [....................                    ] 52% | 5.60 sec | 100 random sampling with cv |     [.....................                   ] 53% | 5.71 sec | 100 random sampling with cv |     [.....................                   ] 54% | 5.82 sec | 100 random sampling with cv |     [......................                  ] 55% | 5.94 sec | 100 random sampling with cv |     [......................                  ] 56% | 6.02 sec | 100 random sampling with cv |     [......................                  ] 57% | 6.10 sec | 100 random sampling with cv |     [.......................                 ] 58% | 6.19 sec | 100 random sampling with cv |     [.......................                 ] 59% | 6.27 sec | 100 random sampling with cv |     [........................                ] 60% | 6.36 sec | 100 random sampling with cv |     [........................                ] 61% | 6.44 sec | 100 random sampling with cv |     [........................                ] 62% | 6.52 sec | 100 random sampling with cv |     [.........................               ] 63% | 6.61 sec | 100 random sampling with cv |     [.........................               ] 64% | 6.72 sec | 100 random sampling with cv |     [..........................              ] 65% | 6.83 sec | 100 random sampling with cv |     [..........................              ] 66% | 6.94 sec | 100 random sampling with cv |     [..........................              ] 67% | 7.06 sec | 100 random sampling with cv |     [...........................             ] 68% | 7.14 sec | 100 random sampling with cv |     [...........................             ] 69% | 7.26 sec | 100 random sampling with cv |     [............................            ] 70% | 7.34 sec | 100 random sampling with cv |     [............................            ] 71% | 7.42 sec | 100 random sampling with cv |     [............................            ] 72% | 7.51 sec | 100 random sampling with cv |     [.............................           ] 73% | 7.59 sec | 100 random sampling with cv |     [.............................           ] 74% | 7.67 sec | 100 random sampling with cv |     [..............................          ] 75% | 7.79 sec | 100 random sampling with cv |     [..............................          ] 76% | 7.90 sec | 100 random sampling with cv |     [..............................          ] 77% | 8.01 sec | 100 random sampling with cv |     [...............................         ] 78% | 8.10 sec | 100 random sampling with cv |     [...............................         ] 79% | 8.18 sec | 100 random sampling with cv |     [................................        ] 80% | 8.26 sec | 100 random sampling with cv |     [................................        ] 81% | 8.35 sec | 100 random sampling with cv |     [................................        ] 82% | 8.43 sec | 100 random sampling with cv |     [.................................       ] 83% | 8.51 sec | 100 random sampling with cv |     [.................................       ] 84% | 8.63 sec | 100 random sampling with cv |     [..................................      ] 85% | 8.74 sec | 100 random sampling with cv |     [..................................      ] 86% | 8.85 sec | 100 random sampling with cv |     [..................................      ] 87% | 8.97 sec | 100 random sampling with cv |     [...................................     ] 88% | 9.05 sec | 100 random sampling with cv |     [...................................     ] 89% | 9.17 sec | 100 random sampling with cv |     [....................................    ] 90% | 9.25 sec | 100 random sampling with cv |     [....................................    ] 91% | 9.33 sec | 100 random sampling with cv |     [....................................    ] 92% | 9.42 sec | 100 random sampling with cv |     [.....................................   ] 93% | 9.53 sec | 100 random sampling with cv |     [.....................................   ] 94% | 9.61 sec | 100 random sampling with cv |     [......................................  ] 95% | 9.73 sec | 100 random sampling with cv |     [......................................  ] 96% | 9.84 sec | 100 random sampling with cv |     [......................................  ] 97% | 9.93 sec | 100 random sampling with cv |     [....................................... ] 98% | 10.01 sec | 100 random sampling with cv |     [....................................... ] 99% | 10.09 sec | 100 random sampling with cv |     [........................................] 100% | 10.18 sec | 100 random sampling with cv | 


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 {color: black;background-color: white;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 pre{padding: 0;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-toggleable {background-color: white;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-estimator:hover {background-color: #d4ebff;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-item {z-index: 1;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-parallel-item:only-child::after {width: 0;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-cf857815-9f78-4844-bd5a-9c136fc30b35 div.sk-text-repr-fallback {display: none;}</style><div id="sk-cf857815-9f78-4844-bd5a-9c136fc30b35" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;Feature space 0&#x27;,
                                                     Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;Feature space 1&#x27;,
                                                     Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;Feature space 2&#x27;,
                                                     Kernelizer(),
                                                     slice(2000, 3000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;,
                                           solver_params={&#x27;alphas&#x27;: array([1.00000000e-10, 3.1622776...
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]),
                                                          &#x27;jitter_alphas&#x27;: True,
                                                          &#x27;n_alphas_batch&#x27;: 20,
                                                          &#x27;n_iter&#x27;: 100,
                                                          &#x27;n_targets_batch&#x27;: 1000,
                                                          &#x27;n_targets_batch_refit&#x27;: 200}))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e87efac6-9cef-42f3-a0de-e07375aa628a" type="checkbox" ><label for="e87efac6-9cef-42f3-a0de-e07375aa628a" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;Feature space 0&#x27;,
                                                     Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;Feature space 1&#x27;,
                                                     Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;Feature space 2&#x27;,
                                                     Kernelizer(),
                                                     slice(2000, 3000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;,
                                           solver_params={&#x27;alphas&#x27;: array([1.00000000e-10, 3.1622776...
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]),
                                                          &#x27;jitter_alphas&#x27;: True,
                                                          &#x27;n_alphas_batch&#x27;: 20,
                                                          &#x27;n_iter&#x27;: 100,
                                                          &#x27;n_targets_batch&#x27;: 1000,
                                                          &#x27;n_targets_batch_refit&#x27;: 200}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c6cfdbc0-5988-4c1f-895a-c4e69cd74378" type="checkbox" ><label for="c6cfdbc0-5988-4c1f-895a-c4e69cd74378" class="sk-toggleable__label sk-toggleable__label-arrow">columnkernelizer: ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[(&#x27;Feature space 0&#x27;, Kernelizer(),
                                    slice(0, 1000, None)),
                                   (&#x27;Feature space 1&#x27;, Kernelizer(),
                                    slice(1000, 2000, None)),
                                   (&#x27;Feature space 2&#x27;, Kernelizer(),
                                    slice(2000, 3000, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="62398f65-6317-4f5c-aabb-e4ffea5860b2" type="checkbox" ><label for="62398f65-6317-4f5c-aabb-e4ffea5860b2" class="sk-toggleable__label sk-toggleable__label-arrow">Feature space 0</label><div class="sk-toggleable__content"><pre>slice(0, 1000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d17c3bb1-48e5-40f7-ac22-d0caab4dfb18" type="checkbox" ><label for="d17c3bb1-48e5-40f7-ac22-d0caab4dfb18" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="83b45e0f-564e-4ca4-9cf4-d3250bae4d42" type="checkbox" ><label for="83b45e0f-564e-4ca4-9cf4-d3250bae4d42" class="sk-toggleable__label sk-toggleable__label-arrow">Feature space 1</label><div class="sk-toggleable__content"><pre>slice(1000, 2000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a9fb3266-bc37-47e6-be91-ea88215c1ec2" type="checkbox" ><label for="a9fb3266-bc37-47e6-be91-ea88215c1ec2" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="68aa3855-3eaa-4305-8f60-b21284788a2c" type="checkbox" ><label for="68aa3855-3eaa-4305-8f60-b21284788a2c" class="sk-toggleable__label sk-toggleable__label-arrow">Feature space 2</label><div class="sk-toggleable__content"><pre>slice(2000, 3000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="be3185ba-f0be-4fce-a40a-61a082d59ee5" type="checkbox" ><label for="be3185ba-f0be-4fce-a40a-61a082d59ee5" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="43bc7532-b4e9-435e-93c4-71a7920fcf4e" type="checkbox" ><label for="43bc7532-b4e9-435e-93c4-71a7920fcf4e" class="sk-toggleable__label sk-toggleable__label-arrow">MultipleKernelRidgeCV</label><div class="sk-toggleable__content"><pre>MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;,
                          solver_params={&#x27;alphas&#x27;: array([1.00000000e-10, 3.16227766e-10, 1.00000000e-09, 3.16227766e-09,
           1.00000000e-08, 3.16227766e-08, 1.00000000e-07, 3.16227766e-07,
           1.00000000e-06, 3.16227766e-06, 1.00000000e-05, 3.16227766e-05,
           1.00000000e-04, 3.16227766e-04, 1.00000000e-03, 3.16227766e-03,
           1.00000000e-02, 3.16227766e-02, 1.000...
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]),
                                         &#x27;jitter_alphas&#x27;: True,
                                         &#x27;n_alphas_batch&#x27;: 20, &#x27;n_iter&#x27;: 100,
                                         &#x27;n_targets_batch&#x27;: 1000,
                                         &#x27;n_targets_batch_refit&#x27;: 200})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 119-121

Plot the convergence curve
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 121-137

.. code-block:: default


    # ``cv_scores`` gives the scores for each sampled kernel weights.
    # The convergence curve is thus the current maximum for each target.
    cv_scores = backend.to_numpy(pipe[1].cv_scores_)
    current_max = np.maximum.accumulate(cv_scores, axis=0)
    mean_current_max = np.mean(current_max, axis=1)

    x_array = np.arange(1, len(mean_current_max) + 1)
    plt.plot(x_array, mean_current_max, '-o')
    plt.grid("on")
    plt.xlabel("Number of kernel weights sampled")
    plt.ylabel("L2 negative loss (higher is better)")
    plt.title("Convergence curve, averaged over targets")
    plt.tight_layout()
    plt.show()




.. image:: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_1_sklearn_api_001.png
    :alt: Convergence curve, averaged over targets
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 138-143

Compare to ``KernelRidgeCV``
----------------------------
Compare to a baseline ``KernelRidgeCV`` model with all the concatenated
features. Comparison is performed using the prediction scores on the test
set.

.. GENERATED FROM PYTHON SOURCE LINES 145-146

Fit the baseline model ``KernelRidgeCV``

.. GENERATED FROM PYTHON SOURCE LINES 146-149

.. code-block:: default

    baseline = KernelRidgeCV(kernel="linear", alphas=alphas)
    baseline.fit(X_train, Y_train)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a {color: black;background-color: white;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a pre{padding: 0;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-toggleable {background-color: white;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-estimator:hover {background-color: #d4ebff;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-item {z-index: 1;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-parallel-item:only-child::after {width: 0;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a div.sk-text-repr-fallback {display: none;}</style><div id="sk-3504f4d0-a254-4ec9-b33d-a48316b76f6a" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>KernelRidgeCV(alphas=array([1.00000000e-10, 3.16227766e-10, 1.00000000e-09, 3.16227766e-09,
           1.00000000e-08, 3.16227766e-08, 1.00000000e-07, 3.16227766e-07,
           1.00000000e-06, 3.16227766e-06, 1.00000000e-05, 3.16227766e-05,
           1.00000000e-04, 3.16227766e-04, 1.00000000e-03, 3.16227766e-03,
           1.00000000e-02, 3.16227766e-02, 1.00000000e-01, 3.16227766e-01,
           1.00000000e+00, 3.16227766e+00, 1.00000000e+01, 3.16227766e+01,
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]))</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9851dd97-0add-4746-9588-c861f7874bf5" type="checkbox" checked><label for="9851dd97-0add-4746-9588-c861f7874bf5" class="sk-toggleable__label sk-toggleable__label-arrow">KernelRidgeCV</label><div class="sk-toggleable__content"><pre>KernelRidgeCV(alphas=array([1.00000000e-10, 3.16227766e-10, 1.00000000e-09, 3.16227766e-09,
           1.00000000e-08, 3.16227766e-08, 1.00000000e-07, 3.16227766e-07,
           1.00000000e-06, 3.16227766e-06, 1.00000000e-05, 3.16227766e-05,
           1.00000000e-04, 3.16227766e-04, 1.00000000e-03, 3.16227766e-03,
           1.00000000e-02, 3.16227766e-02, 1.00000000e-01, 3.16227766e-01,
           1.00000000e+00, 3.16227766e+00, 1.00000000e+01, 3.16227766e+01,
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]))</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 150-151

Compute scores of both models

.. GENERATED FROM PYTHON SOURCE LINES 151-157

.. code-block:: default

    scores = pipe.score(X_test, Y_test)
    scores = backend.to_numpy(scores)

    scores_baseline = baseline.score(X_test, Y_test)
    scores_baseline = backend.to_numpy(scores_baseline)








.. GENERATED FROM PYTHON SOURCE LINES 158-159

Plot histograms

.. GENERATED FROM PYTHON SOURCE LINES 159-166

.. code-block:: default

    bins = np.linspace(0, max(scores_baseline.max(), scores.max()), 50)
    plt.hist(scores_baseline, bins, alpha=0.7, label="KernelRidgeCV")
    plt.hist(scores, bins, alpha=0.7, label="MultipleKernelRidgeCV")
    plt.xlabel(r"$R^2$ generalization score")
    plt.title("Histogram over targets")
    plt.legend()
    plt.show()



.. image:: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_1_sklearn_api_002.png
    :alt: Histogram over targets
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.366 seconds)


.. _sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_1_sklearn_api.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mkr_1_sklearn_api.py <plot_mkr_1_sklearn_api.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mkr_1_sklearn_api.ipynb <plot_mkr_1_sklearn_api.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
