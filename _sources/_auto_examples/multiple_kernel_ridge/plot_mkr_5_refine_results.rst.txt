
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/multiple_kernel_ridge/plot_mkr_5_refine_results.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_5_refine_results.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_multiple_kernel_ridge_plot_mkr_5_refine_results.py:


Multiple-kernel ridge refining
==============================
This example demonstrates how to solve multiple-kernel ridge regression with
hyperparameter random search, then refine the results with hyperparameter
gradient descent.

.. GENERATED FROM PYTHON SOURCE LINES 8-20

.. code-block:: default

    import numpy as np

    from himalaya.backend import set_backend
    from himalaya.kernel_ridge import MultipleKernelRidgeCV
    from himalaya.kernel_ridge import Kernelizer
    from himalaya.kernel_ridge import ColumnKernelizer
    from himalaya.utils import generate_multikernel_dataset

    from sklearn.pipeline import make_pipeline
    from sklearn import set_config
    set_config(display='diagram')








.. GENERATED FROM PYTHON SOURCE LINES 21-22

In this example, we use the ``cupy`` backend (GPU).

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default


    backend = set_backend("cupy", on_error="warn")








.. GENERATED FROM PYTHON SOURCE LINES 26-32

Generate a random dataset
-------------------------
- X_train : array of shape (n_samples_train, n_features)
- X_test : array of shape (n_samples_test, n_features)
- Y_train : array of shape (n_samples_train, n_targets)
- Y_test : array of shape (n_samples_test, n_targets)

.. GENERATED FROM PYTHON SOURCE LINES 32-41

.. code-block:: default


    (X_train, X_test, Y_train, Y_test, kernel_weights,
     n_features_list) = generate_multikernel_dataset(n_kernels=4, n_targets=50,
                                                     n_samples_train=600,
                                                     n_samples_test=300,
                                                     random_state=42)

    feature_names = [f"Feature space {ii}" for ii in range(len(n_features_list))]








.. GENERATED FROM PYTHON SOURCE LINES 42-44

Prepare the pipeline
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 44-57

.. code-block:: default


    # Find the start and end of each feature space X in Xs
    start_and_end = np.concatenate([[0], np.cumsum(n_features_list)])
    slices = [
        slice(start, end)
        for start, end in zip(start_and_end[:-1], start_and_end[1:])
    ]

    # Create a different ``Kernelizer`` for each feature space.
    kernelizers = [("space %d" % ii, Kernelizer(), slice_)
                   for ii, slice_ in enumerate(slices)]
    column_kernelizer = ColumnKernelizer(kernelizers)








.. GENERATED FROM PYTHON SOURCE LINES 58-62

Define the random-search model
------------------------------
We use very few iteration on purpose, to make the random search suboptimal,
and refine it with hyperparameter gradient descent.

.. GENERATED FROM PYTHON SOURCE LINES 62-72

.. code-block:: default


    solver_params = dict(n_iter=5, alphas=np.logspace(-10, 10, 41))

    model_1 = MultipleKernelRidgeCV(kernels="precomputed", solver="random_search",
                                    solver_params=solver_params, random_state=42)
    pipe_1 = make_pipeline(column_kernelizer, model_1)

    # Fit the model on all targets
    pipe_1.fit(X_train, Y_train)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [                                        ] 0% | 0.00 sec | 5 random sampling with cv |     [........                                ] 20% | 0.18 sec | 5 random sampling with cv |     [................                        ] 40% | 0.35 sec | 5 random sampling with cv |     [........................                ] 60% | 0.52 sec | 5 random sampling with cv |     [................................        ] 80% | 0.70 sec | 5 random sampling with cv |     [........................................] 100% | 0.87 sec | 5 random sampling with cv | 


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 {color: black;background-color: white;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 pre{padding: 0;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-toggleable {background-color: white;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-estimator:hover {background-color: #d4ebff;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-item {z-index: 1;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-parallel-item:only-child::after {width: 0;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-e9980b9b-2361-4329-a3e5-853d45a57a66 div.sk-text-repr-fallback {display: none;}</style><div id="sk-e9980b9b-2361-4329-a3e5-853d45a57a66" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;space 1&#x27;, Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;space 2&#x27;, Kernelizer(),
                                                     slice(2000, 3000, None)),
                                                    (&#x27;space 3&#x27;, Kernelizer(),
                                                     slice(3000, 4000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;, random_state=42,
                                           solver_params=...
           1.00000000e-02, 3.16227766e-02, 1.00000000e-01, 3.16227766e-01,
           1.00000000e+00, 3.16227766e+00, 1.00000000e+01, 3.16227766e+01,
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]),
                                                          &#x27;n_iter&#x27;: 5}))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="42d4c209-5c1e-4382-a6b1-1e3f3bca2aa6" type="checkbox" ><label for="42d4c209-5c1e-4382-a6b1-1e3f3bca2aa6" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;space 1&#x27;, Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;space 2&#x27;, Kernelizer(),
                                                     slice(2000, 3000, None)),
                                                    (&#x27;space 3&#x27;, Kernelizer(),
                                                     slice(3000, 4000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;, random_state=42,
                                           solver_params=...
           1.00000000e-02, 3.16227766e-02, 1.00000000e-01, 3.16227766e-01,
           1.00000000e+00, 3.16227766e+00, 1.00000000e+01, 3.16227766e+01,
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]),
                                                          &#x27;n_iter&#x27;: 5}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="aa2cd617-b77c-45f0-bd06-78cb94b40277" type="checkbox" ><label for="aa2cd617-b77c-45f0-bd06-78cb94b40277" class="sk-toggleable__label sk-toggleable__label-arrow">columnkernelizer: ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(), slice(0, 1000, None)),
                                   (&#x27;space 1&#x27;, Kernelizer(),
                                    slice(1000, 2000, None)),
                                   (&#x27;space 2&#x27;, Kernelizer(),
                                    slice(2000, 3000, None)),
                                   (&#x27;space 3&#x27;, Kernelizer(),
                                    slice(3000, 4000, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c4b241c8-b415-4f8c-bf60-3f30a9644242" type="checkbox" ><label for="c4b241c8-b415-4f8c-bf60-3f30a9644242" class="sk-toggleable__label sk-toggleable__label-arrow">space 0</label><div class="sk-toggleable__content"><pre>slice(0, 1000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8b283a1a-5e5b-4167-99d0-aacef205cadc" type="checkbox" ><label for="8b283a1a-5e5b-4167-99d0-aacef205cadc" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="eda2fc50-baf1-40ba-912f-f33c2c94f8bb" type="checkbox" ><label for="eda2fc50-baf1-40ba-912f-f33c2c94f8bb" class="sk-toggleable__label sk-toggleable__label-arrow">space 1</label><div class="sk-toggleable__content"><pre>slice(1000, 2000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="708cbeac-e0a5-4c10-a197-1c536b80e569" type="checkbox" ><label for="708cbeac-e0a5-4c10-a197-1c536b80e569" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="29a7f7b8-6fbc-4cc1-a0cd-41407384d4f7" type="checkbox" ><label for="29a7f7b8-6fbc-4cc1-a0cd-41407384d4f7" class="sk-toggleable__label sk-toggleable__label-arrow">space 2</label><div class="sk-toggleable__content"><pre>slice(2000, 3000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="974c3c87-6aae-4ed5-8150-114425099cea" type="checkbox" ><label for="974c3c87-6aae-4ed5-8150-114425099cea" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="60172fb2-6a56-415a-b8e2-97fcd6872ce9" type="checkbox" ><label for="60172fb2-6a56-415a-b8e2-97fcd6872ce9" class="sk-toggleable__label sk-toggleable__label-arrow">space 3</label><div class="sk-toggleable__content"><pre>slice(3000, 4000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="16a6480e-8677-493c-a9d5-43fe988f58ef" type="checkbox" ><label for="16a6480e-8677-493c-a9d5-43fe988f58ef" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e04e5bfc-9aae-4576-9973-8a1c13c88057" type="checkbox" ><label for="e04e5bfc-9aae-4576-9973-8a1c13c88057" class="sk-toggleable__label sk-toggleable__label-arrow">MultipleKernelRidgeCV</label><div class="sk-toggleable__content"><pre>MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;, random_state=42,
                          solver_params={&#x27;alphas&#x27;: array([1.00000000e-10, 3.16227766e-10, 1.00000000e-09, 3.16227766e-09,
           1.00000000e-08, 3.16227766e-08, 1.00000000e-07, 3.16227766e-07,
           1.00000000e-06, 3.16227766e-06, 1.00000000e-05, 3.16227766e-05,
           1.00000000e-04, 3.16227766e-04, 1.00000000e-03, 3.16227766e-03,
           1.00000000e-02, 3.16...0e-01, 3.16227766e-01,
           1.00000000e+00, 3.16227766e+00, 1.00000000e+01, 3.16227766e+01,
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]),
                                         &#x27;n_iter&#x27;: 5})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 73-75

Define the gradient-descent model
---------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 75-84

.. code-block:: default


    solver_params = dict(max_iter=10, hyper_gradient_method="direct",
                         max_iter_inner_hyper=10,
                         initial_deltas="here_will_go_the_previous_deltas")

    model_2 = MultipleKernelRidgeCV(kernels="precomputed", solver="hyper_gradient",
                                    solver_params=solver_params)
    pipe_2 = make_pipeline(column_kernelizer, model_2)








.. GENERATED FROM PYTHON SOURCE LINES 85-87

Use the random-search to initialize the gradient-descent
--------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 87-97

.. code-block:: default


    # We might want to refine only the best predicting targets, since the
    # hyperparameter gradient descent is less efficient over many targets.
    top = 60  # top 60%
    best_cv_scores = backend.to_numpy(pipe_1[-1].cv_scores_.max(0))
    mask = best_cv_scores > np.percentile(best_cv_scores, 100 - top)

    pipe_2[-1].solver_params['initial_deltas'] = pipe_1[-1].deltas_[:, mask]
    pipe_2.fit(X_train, Y_train[:, mask])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [                                        ] 0% | 0.00 sec | hypergradient_direct |     [                                        ] 0% | 0.00 sec | hypergradient_direct |     [....                                    ] 10% | 0.35 sec | hypergradient_direct |     [........                                ] 20% | 0.44 sec | hypergradient_direct |     [............                            ] 30% | 0.54 sec | hypergradient_direct |     [................                        ] 40% | 0.63 sec | hypergradient_direct |     [....................                    ] 50% | 0.73 sec | hypergradient_direct |     [........................                ] 60% | 0.83 sec | hypergradient_direct |     [............................            ] 70% | 0.92 sec | hypergradient_direct |     [................................        ] 80% | 1.02 sec | hypergradient_direct |     [....................................    ] 90% | 1.11 sec | hypergradient_direct |     [........................................] 100% | 1.35 sec | hypergradient_direct | 


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 {color: black;background-color: white;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 pre{padding: 0;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-toggleable {background-color: white;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-estimator:hover {background-color: #d4ebff;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-item {z-index: 1;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-parallel-item:only-child::after {width: 0;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02 div.sk-text-repr-fallback {display: none;}</style><div id="sk-7fb6101b-fe9e-46b1-b805-ade818cf3e02" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;space 1&#x27;, Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;space 2&#x27;, Kernelizer(),
                                                     slice(2000, 3000, None)),
                                                    (&#x27;space 3&#x27;, Kernelizer(),
                                                     slice(3000, 4000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;,
                                           solver=&#x27;hyper_gradient&#x27;,
                                           solver...
           [ 21.57146  , -21.007488 ,  -2.6056826,  -3.738099 ,  -7.008298 ,
            -13.180669 ,  -7.008298 ,  -7.008298 ,  -4.705713 ,  20.622723 ,
             21.639557 ,   6.6727533, -19.856195 ,  21.639557 ,  21.57146  ,
             21.57146  ,  21.639557 ,  21.57146  ,  -5.857005 ,  21.57146  ,
            -13.180669 ,  -5.857005 ,  -5.857005 ,  21.57146  ,  15.601645 ,
             -3.7569752, -21.007488 ,  21.57146  ,  -4.9082675,  -4.9082675]],
          dtype=float32),
                                                          &#x27;max_iter&#x27;: 10,
                                                          &#x27;max_iter_inner_hyper&#x27;: 10}))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="dca19f31-01c8-4afa-8b8f-9149a84e3d09" type="checkbox" ><label for="dca19f31-01c8-4afa-8b8f-9149a84e3d09" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;space 1&#x27;, Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;space 2&#x27;, Kernelizer(),
                                                     slice(2000, 3000, None)),
                                                    (&#x27;space 3&#x27;, Kernelizer(),
                                                     slice(3000, 4000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;,
                                           solver=&#x27;hyper_gradient&#x27;,
                                           solver...
           [ 21.57146  , -21.007488 ,  -2.6056826,  -3.738099 ,  -7.008298 ,
            -13.180669 ,  -7.008298 ,  -7.008298 ,  -4.705713 ,  20.622723 ,
             21.639557 ,   6.6727533, -19.856195 ,  21.639557 ,  21.57146  ,
             21.57146  ,  21.639557 ,  21.57146  ,  -5.857005 ,  21.57146  ,
            -13.180669 ,  -5.857005 ,  -5.857005 ,  21.57146  ,  15.601645 ,
             -3.7569752, -21.007488 ,  21.57146  ,  -4.9082675,  -4.9082675]],
          dtype=float32),
                                                          &#x27;max_iter&#x27;: 10,
                                                          &#x27;max_iter_inner_hyper&#x27;: 10}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="636d5ed1-6171-41ef-a7fe-69ca42ec013c" type="checkbox" ><label for="636d5ed1-6171-41ef-a7fe-69ca42ec013c" class="sk-toggleable__label sk-toggleable__label-arrow">columnkernelizer: ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(), slice(0, 1000, None)),
                                   (&#x27;space 1&#x27;, Kernelizer(),
                                    slice(1000, 2000, None)),
                                   (&#x27;space 2&#x27;, Kernelizer(),
                                    slice(2000, 3000, None)),
                                   (&#x27;space 3&#x27;, Kernelizer(),
                                    slice(3000, 4000, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="dc725058-d2e5-42aa-a291-06c9c6de0275" type="checkbox" ><label for="dc725058-d2e5-42aa-a291-06c9c6de0275" class="sk-toggleable__label sk-toggleable__label-arrow">space 0</label><div class="sk-toggleable__content"><pre>slice(0, 1000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="dd37ad44-f690-47ad-9b5c-569a7735dfa0" type="checkbox" ><label for="dd37ad44-f690-47ad-9b5c-569a7735dfa0" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d7ead3db-d69f-47e4-84ff-4603d145c8fe" type="checkbox" ><label for="d7ead3db-d69f-47e4-84ff-4603d145c8fe" class="sk-toggleable__label sk-toggleable__label-arrow">space 1</label><div class="sk-toggleable__content"><pre>slice(1000, 2000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="08047127-3b54-494c-b3d4-bf812eabedb5" type="checkbox" ><label for="08047127-3b54-494c-b3d4-bf812eabedb5" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e78619ae-dadd-4be5-b2b5-af0624cc26c6" type="checkbox" ><label for="e78619ae-dadd-4be5-b2b5-af0624cc26c6" class="sk-toggleable__label sk-toggleable__label-arrow">space 2</label><div class="sk-toggleable__content"><pre>slice(2000, 3000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3945b286-0e60-4e48-b313-993565b24590" type="checkbox" ><label for="3945b286-0e60-4e48-b313-993565b24590" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0ec3cc58-096a-484b-8d56-709af5f9f580" type="checkbox" ><label for="0ec3cc58-096a-484b-8d56-709af5f9f580" class="sk-toggleable__label sk-toggleable__label-arrow">space 3</label><div class="sk-toggleable__content"><pre>slice(3000, 4000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="7473cb68-0e76-489d-be3a-4107fc3b9faf" type="checkbox" ><label for="7473cb68-0e76-489d-be3a-4107fc3b9faf" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="920857d7-0ee9-44f7-99b7-34a02a27c1e8" type="checkbox" ><label for="920857d7-0ee9-44f7-99b7-34a02a27c1e8" class="sk-toggleable__label sk-toggleable__label-arrow">MultipleKernelRidgeCV</label><div class="sk-toggleable__content"><pre>MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;, solver=&#x27;hyper_gradient&#x27;,
                          solver_params={&#x27;hyper_gradient_method&#x27;: &#x27;direct&#x27;,
                                         &#x27;initial_deltas&#x27;: array([[ 21.401106 ,  -9.05007  ,  -2.7760372,   8.219318 ,  -5.439581 ,
            -12.774917 ,  -5.439581 ,  -5.439581 ,  -3.1369958,  22.19144  ,
             21.639557 ,   6.6727533,  -7.898777 ,  21.639557 ,  21.401106 ,
             21.401106 ,  21.639557 ,  21.401106 ,  -4.288288 ,  21.401106 ,
            -12.77491...
           [ 21.57146  , -21.007488 ,  -2.6056826,  -3.738099 ,  -7.008298 ,
            -13.180669 ,  -7.008298 ,  -7.008298 ,  -4.705713 ,  20.622723 ,
             21.639557 ,   6.6727533, -19.856195 ,  21.639557 ,  21.57146  ,
             21.57146  ,  21.639557 ,  21.57146  ,  -5.857005 ,  21.57146  ,
            -13.180669 ,  -5.857005 ,  -5.857005 ,  21.57146  ,  15.601645 ,
             -3.7569752, -21.007488 ,  21.57146  ,  -4.9082675,  -4.9082675]],
          dtype=float32),
                                         &#x27;max_iter&#x27;: 10,
                                         &#x27;max_iter_inner_hyper&#x27;: 10})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 98-100

Compute predictions on a test set
---------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 100-121

.. code-block:: default

    import matplotlib.pyplot as plt

    # use the first model for all targets
    test_scores_1 = pipe_1.score(X_test, Y_test)

    # use the second model for the refined targets
    test_scores_2 = backend.copy(test_scores_1)
    test_scores_2[mask] = pipe_2.score(X_test, Y_test[:, mask])

    test_scores_1 = backend.to_numpy(test_scores_1)
    test_scores_2 = backend.to_numpy(test_scores_2)
    plt.figure(figsize=(4, 4))
    plt.scatter(test_scores_1, test_scores_2, alpha=0.3)
    plt.xlim(0, 1)
    plt.plot(plt.xlim(), plt.xlim(), color='k', lw=1)
    plt.xlabel(r"Base model")
    plt.ylabel(r"Refined model")
    plt.title("$R^2$ generalization score")
    plt.grid()
    plt.tight_layout()
    plt.show()



.. image:: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_5_refine_results_001.png
    :alt: $R^2$ generalization score
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.390 seconds)


.. _sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_5_refine_results.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mkr_5_refine_results.py <plot_mkr_5_refine_results.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mkr_5_refine_results.ipynb <plot_mkr_5_refine_results.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
