
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/multiple_kernel_ridge/plot_mkr_5_refine_results.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_5_refine_results.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_multiple_kernel_ridge_plot_mkr_5_refine_results.py:


Multiple-kernel ridge refining
==============================
This example demonstrates how to solve multiple-kernel ridge regression with
hyperparameter random search, then refine the results with hyperparameter
gradient descent.

.. GENERATED FROM PYTHON SOURCE LINES 8-20

.. code-block:: default

    import numpy as np

    from himalaya.backend import set_backend
    from himalaya.kernel_ridge import MultipleKernelRidgeCV
    from himalaya.kernel_ridge import Kernelizer
    from himalaya.kernel_ridge import ColumnKernelizer
    from himalaya.utils import generate_multikernel_dataset

    from sklearn.pipeline import make_pipeline
    from sklearn import set_config
    set_config(display='diagram')








.. GENERATED FROM PYTHON SOURCE LINES 21-22

In this example, we use the ``cupy`` backend (GPU).

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default


    backend = set_backend("cupy", on_error="warn")








.. GENERATED FROM PYTHON SOURCE LINES 26-32

Generate a random dataset
-------------------------
- X_train : array of shape (n_samples_train, n_features)
- X_test : array of shape (n_samples_test, n_features)
- Y_train : array of shape (n_samples_train, n_targets)
- Y_test : array of shape (n_samples_test, n_targets)

.. GENERATED FROM PYTHON SOURCE LINES 32-41

.. code-block:: default


    (X_train, X_test, Y_train, Y_test, kernel_weights,
     n_features_list) = generate_multikernel_dataset(n_kernels=4, n_targets=50,
                                                     n_samples_train=600,
                                                     n_samples_test=300,
                                                     random_state=42)

    feature_names = [f"Feature space {ii}" for ii in range(len(n_features_list))]








.. GENERATED FROM PYTHON SOURCE LINES 42-44

Prepare the pipeline
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 44-57

.. code-block:: default


    # Find the start and end of each feature space X in Xs
    start_and_end = np.concatenate([[0], np.cumsum(n_features_list)])
    slices = [
        slice(start, end)
        for start, end in zip(start_and_end[:-1], start_and_end[1:])
    ]

    # Create a different ``Kernelizer`` for each feature space.
    kernelizers = [("space %d" % ii, Kernelizer(), slice_)
                   for ii, slice_ in enumerate(slices)]
    column_kernelizer = ColumnKernelizer(kernelizers)








.. GENERATED FROM PYTHON SOURCE LINES 58-62

Define the random-search model
------------------------------
We use very few iteration on purpose, to make the random search suboptimal,
and refine it with hyperparameter gradient descent.

.. GENERATED FROM PYTHON SOURCE LINES 62-72

.. code-block:: default


    solver_params = dict(n_iter=5, alphas=np.logspace(-10, 10, 41))

    model_1 = MultipleKernelRidgeCV(kernels="precomputed", solver="random_search",
                                    solver_params=solver_params, random_state=42)
    pipe_1 = make_pipeline(column_kernelizer, model_1)

    # Fit the model on all targets
    pipe_1.fit(X_train, Y_train)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [                                        ] 0% | 0.00 sec | 5 random sampling with cv |     [........                                ] 20% | 0.18 sec | 5 random sampling with cv |     [................                        ] 40% | 0.35 sec | 5 random sampling with cv |     [........................                ] 60% | 0.53 sec | 5 random sampling with cv |     [................................        ] 80% | 0.70 sec | 5 random sampling with cv |     [........................................] 100% | 0.87 sec | 5 random sampling with cv | 


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f {color: black;background-color: white;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f pre{padding: 0;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-toggleable {background-color: white;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-estimator:hover {background-color: #d4ebff;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-item {z-index: 1;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-parallel-item:only-child::after {width: 0;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-9077f513-ec3e-48b8-b535-ad2c0badc41f div.sk-text-repr-fallback {display: none;}</style><div id="sk-9077f513-ec3e-48b8-b535-ad2c0badc41f" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;space 1&#x27;, Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;space 2&#x27;, Kernelizer(),
                                                     slice(2000, 3000, None)),
                                                    (&#x27;space 3&#x27;, Kernelizer(),
                                                     slice(3000, 4000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;, random_state=42,
                                           solver_params=...
           1.00000000e-02, 3.16227766e-02, 1.00000000e-01, 3.16227766e-01,
           1.00000000e+00, 3.16227766e+00, 1.00000000e+01, 3.16227766e+01,
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]),
                                                          &#x27;n_iter&#x27;: 5}))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="93d2eed0-21af-4884-a4bf-92817c50da9d" type="checkbox" ><label for="93d2eed0-21af-4884-a4bf-92817c50da9d" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;space 1&#x27;, Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;space 2&#x27;, Kernelizer(),
                                                     slice(2000, 3000, None)),
                                                    (&#x27;space 3&#x27;, Kernelizer(),
                                                     slice(3000, 4000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;, random_state=42,
                                           solver_params=...
           1.00000000e-02, 3.16227766e-02, 1.00000000e-01, 3.16227766e-01,
           1.00000000e+00, 3.16227766e+00, 1.00000000e+01, 3.16227766e+01,
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]),
                                                          &#x27;n_iter&#x27;: 5}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="134cba77-0528-4d9a-aea4-1da11e012631" type="checkbox" ><label for="134cba77-0528-4d9a-aea4-1da11e012631" class="sk-toggleable__label sk-toggleable__label-arrow">columnkernelizer: ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(), slice(0, 1000, None)),
                                   (&#x27;space 1&#x27;, Kernelizer(),
                                    slice(1000, 2000, None)),
                                   (&#x27;space 2&#x27;, Kernelizer(),
                                    slice(2000, 3000, None)),
                                   (&#x27;space 3&#x27;, Kernelizer(),
                                    slice(3000, 4000, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="eee535f5-2ca0-4688-b50d-64cb21857a63" type="checkbox" ><label for="eee535f5-2ca0-4688-b50d-64cb21857a63" class="sk-toggleable__label sk-toggleable__label-arrow">space 0</label><div class="sk-toggleable__content"><pre>slice(0, 1000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a8baeb45-897f-47b3-a908-53783108c545" type="checkbox" ><label for="a8baeb45-897f-47b3-a908-53783108c545" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="18dd7f54-9e1a-499d-a26b-faebd6682e2d" type="checkbox" ><label for="18dd7f54-9e1a-499d-a26b-faebd6682e2d" class="sk-toggleable__label sk-toggleable__label-arrow">space 1</label><div class="sk-toggleable__content"><pre>slice(1000, 2000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="41890856-4e94-4b02-a621-4edd49ee1e34" type="checkbox" ><label for="41890856-4e94-4b02-a621-4edd49ee1e34" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0a08cd69-bf32-4c6f-a010-ee86d0c0e8aa" type="checkbox" ><label for="0a08cd69-bf32-4c6f-a010-ee86d0c0e8aa" class="sk-toggleable__label sk-toggleable__label-arrow">space 2</label><div class="sk-toggleable__content"><pre>slice(2000, 3000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b2bce2bf-ace4-4aa9-b870-3956302d011b" type="checkbox" ><label for="b2bce2bf-ace4-4aa9-b870-3956302d011b" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a8879677-958f-4d10-8274-33654bbf1541" type="checkbox" ><label for="a8879677-958f-4d10-8274-33654bbf1541" class="sk-toggleable__label sk-toggleable__label-arrow">space 3</label><div class="sk-toggleable__content"><pre>slice(3000, 4000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="038b9369-86af-4a2b-9664-db7e2805f83e" type="checkbox" ><label for="038b9369-86af-4a2b-9664-db7e2805f83e" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8ff297f8-01a8-480f-9647-0d9e86745578" type="checkbox" ><label for="8ff297f8-01a8-480f-9647-0d9e86745578" class="sk-toggleable__label sk-toggleable__label-arrow">MultipleKernelRidgeCV</label><div class="sk-toggleable__content"><pre>MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;, random_state=42,
                          solver_params={&#x27;alphas&#x27;: array([1.00000000e-10, 3.16227766e-10, 1.00000000e-09, 3.16227766e-09,
           1.00000000e-08, 3.16227766e-08, 1.00000000e-07, 3.16227766e-07,
           1.00000000e-06, 3.16227766e-06, 1.00000000e-05, 3.16227766e-05,
           1.00000000e-04, 3.16227766e-04, 1.00000000e-03, 3.16227766e-03,
           1.00000000e-02, 3.16...0e-01, 3.16227766e-01,
           1.00000000e+00, 3.16227766e+00, 1.00000000e+01, 3.16227766e+01,
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]),
                                         &#x27;n_iter&#x27;: 5})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 73-75

Define the gradient-descent model
---------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 75-84

.. code-block:: default


    solver_params = dict(max_iter=10, hyper_gradient_method="direct",
                         max_iter_inner_hyper=10,
                         initial_deltas="here_will_go_the_previous_deltas")

    model_2 = MultipleKernelRidgeCV(kernels="precomputed", solver="hyper_gradient",
                                    solver_params=solver_params)
    pipe_2 = make_pipeline(column_kernelizer, model_2)








.. GENERATED FROM PYTHON SOURCE LINES 85-87

Use the random-search to initialize the gradient-descent
--------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 87-97

.. code-block:: default


    # We might want to refine only the best predicting targets, since the
    # hyperparameter gradient descent is less efficient over many targets.
    top = 60  # top 60%
    best_cv_scores = backend.to_numpy(pipe_1[-1].cv_scores_.max(0))
    mask = best_cv_scores > np.percentile(best_cv_scores, 100 - top)

    pipe_2[-1].solver_params['initial_deltas'] = pipe_1[-1].deltas_[:, mask]
    pipe_2.fit(X_train, Y_train[:, mask])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [                                        ] 0% | 0.00 sec | hypergradient_direct |     [                                        ] 0% | 0.00 sec | hypergradient_direct |     [....                                    ] 10% | 0.36 sec | hypergradient_direct |     [........                                ] 20% | 0.46 sec | hypergradient_direct |     [............                            ] 30% | 0.57 sec | hypergradient_direct |     [................                        ] 40% | 0.67 sec | hypergradient_direct |     [....................                    ] 50% | 0.76 sec | hypergradient_direct |     [........................                ] 60% | 0.86 sec | hypergradient_direct |     [............................            ] 70% | 0.96 sec | hypergradient_direct |     [................................        ] 80% | 1.06 sec | hypergradient_direct |     [....................................    ] 90% | 1.16 sec | hypergradient_direct |     [........................................] 100% | 1.33 sec | hypergradient_direct | 


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba {color: black;background-color: white;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba pre{padding: 0;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-toggleable {background-color: white;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-estimator:hover {background-color: #d4ebff;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-item {z-index: 1;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-parallel-item:only-child::after {width: 0;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba div.sk-text-repr-fallback {display: none;}</style><div id="sk-bc2c1f29-d14f-40bd-8c82-8ffd3c095dba" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;space 1&#x27;, Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;space 2&#x27;, Kernelizer(),
                                                     slice(2000, 3000, None)),
                                                    (&#x27;space 3&#x27;, Kernelizer(),
                                                     slice(3000, 4000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;,
                                           solver=&#x27;hyper_gradient&#x27;,
                                           solver...
           [ 21.57146  , -21.007488 ,  -4.889392 ,  20.622723 ,  -7.008298 ,
              5.65592  ,  20.622723 ,  -7.008298 ,  -7.008298 ,  21.639557 ,
            -19.856195 ,  21.639557 ,  21.57146  ,   8.907243 ,  21.639557 ,
            -13.180669 , -13.180669 , -13.180669 ,  10.058536 ,  21.57146  ,
            -13.180669 ,   7.958505 ,  21.57146  ,  21.57146  ,  -8.575499 ,
             21.57146  ,  21.639557 ,  21.57146  ,  21.57146  ,  -5.857005 ]],
          dtype=float32),
                                                          &#x27;max_iter&#x27;: 10,
                                                          &#x27;max_iter_inner_hyper&#x27;: 10}))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a6759b92-96f2-4fcf-a03d-f9a3d6359254" type="checkbox" ><label for="a6759b92-96f2-4fcf-a03d-f9a3d6359254" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;space 1&#x27;, Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;space 2&#x27;, Kernelizer(),
                                                     slice(2000, 3000, None)),
                                                    (&#x27;space 3&#x27;, Kernelizer(),
                                                     slice(3000, 4000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;,
                                           solver=&#x27;hyper_gradient&#x27;,
                                           solver...
           [ 21.57146  , -21.007488 ,  -4.889392 ,  20.622723 ,  -7.008298 ,
              5.65592  ,  20.622723 ,  -7.008298 ,  -7.008298 ,  21.639557 ,
            -19.856195 ,  21.639557 ,  21.57146  ,   8.907243 ,  21.639557 ,
            -13.180669 , -13.180669 , -13.180669 ,  10.058536 ,  21.57146  ,
            -13.180669 ,   7.958505 ,  21.57146  ,  21.57146  ,  -8.575499 ,
             21.57146  ,  21.639557 ,  21.57146  ,  21.57146  ,  -5.857005 ]],
          dtype=float32),
                                                          &#x27;max_iter&#x27;: 10,
                                                          &#x27;max_iter_inner_hyper&#x27;: 10}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="39e7dec9-7973-401e-b4ba-30ec18da7745" type="checkbox" ><label for="39e7dec9-7973-401e-b4ba-30ec18da7745" class="sk-toggleable__label sk-toggleable__label-arrow">columnkernelizer: ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(), slice(0, 1000, None)),
                                   (&#x27;space 1&#x27;, Kernelizer(),
                                    slice(1000, 2000, None)),
                                   (&#x27;space 2&#x27;, Kernelizer(),
                                    slice(2000, 3000, None)),
                                   (&#x27;space 3&#x27;, Kernelizer(),
                                    slice(3000, 4000, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="59fdbb1e-ef0e-46c8-bab6-069f6e7f6a2d" type="checkbox" ><label for="59fdbb1e-ef0e-46c8-bab6-069f6e7f6a2d" class="sk-toggleable__label sk-toggleable__label-arrow">space 0</label><div class="sk-toggleable__content"><pre>slice(0, 1000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a292437a-f3c0-4df8-b34a-bdbc55c71e1d" type="checkbox" ><label for="a292437a-f3c0-4df8-b34a-bdbc55c71e1d" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="004e71be-4641-4770-9771-df3092c47efe" type="checkbox" ><label for="004e71be-4641-4770-9771-df3092c47efe" class="sk-toggleable__label sk-toggleable__label-arrow">space 1</label><div class="sk-toggleable__content"><pre>slice(1000, 2000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d218cebe-9d10-4a6f-8811-af6e6123755e" type="checkbox" ><label for="d218cebe-9d10-4a6f-8811-af6e6123755e" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="570282b6-d063-4266-a627-be7071bae709" type="checkbox" ><label for="570282b6-d063-4266-a627-be7071bae709" class="sk-toggleable__label sk-toggleable__label-arrow">space 2</label><div class="sk-toggleable__content"><pre>slice(2000, 3000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4db98fc0-2995-4a70-8c47-df464e92aeea" type="checkbox" ><label for="4db98fc0-2995-4a70-8c47-df464e92aeea" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="88126e6f-f725-4536-acb3-f6103d050abc" type="checkbox" ><label for="88126e6f-f725-4536-acb3-f6103d050abc" class="sk-toggleable__label sk-toggleable__label-arrow">space 3</label><div class="sk-toggleable__content"><pre>slice(3000, 4000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ceaf5a50-a22f-4792-ac0a-2f65006b5a13" type="checkbox" ><label for="ceaf5a50-a22f-4792-ac0a-2f65006b5a13" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fe8172ae-2e11-4e39-b9a1-efa5ff78c1f8" type="checkbox" ><label for="fe8172ae-2e11-4e39-b9a1-efa5ff78c1f8" class="sk-toggleable__label sk-toggleable__label-arrow">MultipleKernelRidgeCV</label><div class="sk-toggleable__content"><pre>MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;, solver=&#x27;hyper_gradient&#x27;,
                          solver_params={&#x27;hyper_gradient_method&#x27;: &#x27;direct&#x27;,
                                         &#x27;initial_deltas&#x27;: array([[ 21.401106 ,  -9.05007  ,   7.068026 ,  22.19144  ,  -5.439581 ,
              7.224637 ,  22.19144  ,  -5.439581 ,  -5.439581 ,  21.639557 ,
             -7.898777 ,  21.639557 ,  21.401106 ,   8.736888 ,  21.639557 ,
            -12.774917 , -12.774917 , -12.774917 ,   9.888181 ,  21.401106 ,
            -12.774917 ,   9....
           [ 21.57146  , -21.007488 ,  -4.889392 ,  20.622723 ,  -7.008298 ,
              5.65592  ,  20.622723 ,  -7.008298 ,  -7.008298 ,  21.639557 ,
            -19.856195 ,  21.639557 ,  21.57146  ,   8.907243 ,  21.639557 ,
            -13.180669 , -13.180669 , -13.180669 ,  10.058536 ,  21.57146  ,
            -13.180669 ,   7.958505 ,  21.57146  ,  21.57146  ,  -8.575499 ,
             21.57146  ,  21.639557 ,  21.57146  ,  21.57146  ,  -5.857005 ]],
          dtype=float32),
                                         &#x27;max_iter&#x27;: 10,
                                         &#x27;max_iter_inner_hyper&#x27;: 10})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 98-100

Compute predictions on a test set
---------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 100-120

.. code-block:: default

    import matplotlib.pyplot as plt

    # use the first model for all targets
    test_scores_1 = pipe_1.score(X_test, Y_test)

    # use the second model for the refined targets
    test_scores_2 = backend.copy(test_scores_1)
    test_scores_2[mask] = pipe_2.score(X_test, Y_test[:, mask])

    test_scores_1 = backend.to_numpy(test_scores_1)
    test_scores_2 = backend.to_numpy(test_scores_2)
    plt.figure(figsize=(4, 4))
    plt.scatter(test_scores_1, test_scores_2, alpha=0.3)
    plt.xlim(0, 1)
    plt.plot(plt.xlim(), plt.xlim(), color='k', lw=1)
    plt.xlabel(r"Base model")
    plt.ylabel(r"Refined model")
    plt.title("$R^2$ generalization score")
    plt.tight_layout()
    plt.show()



.. image:: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_5_refine_results_001.png
    :alt: $R^2$ generalization score
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.374 seconds)


.. _sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_5_refine_results.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mkr_5_refine_results.py <plot_mkr_5_refine_results.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mkr_5_refine_results.ipynb <plot_mkr_5_refine_results.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
