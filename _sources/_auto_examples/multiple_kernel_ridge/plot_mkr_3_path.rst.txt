
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/multiple_kernel_ridge/plot_mkr_3_path.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_3_path.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_multiple_kernel_ridge_plot_mkr_3_path.py:


Multiple-kernel ridge path between two kernels
==============================================
This example demonstrates the path of all possible ratios of kernel weights
between two kernels, in a multiple kernel ridge regression model. Over the path
of ratios, the kernels are weighted by the kernel weights, then summed, and a
joint model is fit on the obtained kernel. The explained variance on a test set
is then computed, and decomposed over both kernels.

.. GENERATED FROM PYTHON SOURCE LINES 10-26

.. code-block:: default

    from functools import partial

    import numpy as np
    import matplotlib.pyplot as plt

    from himalaya.backend import set_backend
    from himalaya.kernel_ridge import MultipleKernelRidgeCV
    from himalaya.kernel_ridge import Kernelizer
    from himalaya.kernel_ridge import ColumnKernelizer
    from himalaya.progress_bar import bar
    from himalaya.utils import generate_multikernel_dataset

    from sklearn.pipeline import make_pipeline
    from sklearn import set_config
    set_config(display='diagram')








.. GENERATED FROM PYTHON SOURCE LINES 27-28

In this example, we use the ``cupy`` backend.

.. GENERATED FROM PYTHON SOURCE LINES 28-31

.. code-block:: default


    backend = set_backend("cupy", on_error="warn")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/himalaya/himalaya/himalaya/backend/_utils.py:56: UserWarning: Setting backend to cupy failed: Cupy not installed..Falling back to numpy backend.
      warnings.warn(f"Setting backend to {backend} failed: {str(error)}."




.. GENERATED FROM PYTHON SOURCE LINES 32-38

Generate a random dataset
-------------------------
- X_train : array of shape (n_samples_train, n_features)
- X_test : array of shape (n_samples_test, n_features)
- Y_train : array of shape (n_samples_train, n_targets)
- Y_test : array of shape (n_samples_test, n_targets)

.. GENERATED FROM PYTHON SOURCE LINES 38-50

.. code-block:: default


    n_targets = 50
    kernel_weights = np.tile(np.array([0.6, 0.4])[None], (n_targets, 1))

    (X_train, X_test, Y_train, Y_test,
     kernel_weights, n_features_list) = generate_multikernel_dataset(
         n_kernels=2, n_targets=n_targets, n_samples_train=600,
         n_samples_test=300, random_state=42, noise=0.3,
         kernel_weights=kernel_weights)

    feature_names = [f"Feature space {ii}" for ii in range(len(n_features_list))]








.. GENERATED FROM PYTHON SOURCE LINES 51-53

Create a MultipleKernelRidgeCV model, see plot_mkr_sklearn_api.py for more
details.

.. GENERATED FROM PYTHON SOURCE LINES 53-74

.. code-block:: default


    # Find the start and end of each feature space X in Xs.
    start_and_end = np.concatenate([[0], np.cumsum(n_features_list)])
    slices = [
        slice(start, end)
        for start, end in zip(start_and_end[:-1], start_and_end[1:])
    ]

    # Create a different ``Kernelizer`` for each feature space.
    kernelizers = [(name, Kernelizer(), slice_)
                   for name, slice_ in zip(feature_names, slices)]
    column_kernelizer = ColumnKernelizer(kernelizers)

    # Create a MultipleKernelRidgeCV model.
    solver_params = dict(alphas=np.logspace(-5, 5, 41), progress_bar=False)
    model = MultipleKernelRidgeCV(kernels="precomputed", solver="random_search",
                                  solver_params=solver_params,
                                  random_state=42)
    pipe = make_pipeline(column_kernelizer, model)
    pipe






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-85b66c74-4dce-4386-806c-31ce1e628b82 {color: black;background-color: white;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 pre{padding: 0;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-toggleable {background-color: white;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-estimator:hover {background-color: #d4ebff;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-item {z-index: 1;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-parallel-item:only-child::after {width: 0;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-85b66c74-4dce-4386-806c-31ce1e628b82 div.sk-text-repr-fallback {display: none;}</style><div id="sk-85b66c74-4dce-4386-806c-31ce1e628b82" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;Feature space 0&#x27;,
                                                     Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;Feature space 1&#x27;,
                                                     Kernelizer(),
                                                     slice(1000, 2000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;, random_state=42,
                                           solver_params={&#x27;alphas&#x27;: array([1.00000000e-05, 1.77827941e-05, 3.16227766e-05, 5.62341325e-05,
           1...
           1.00000000e-01, 1.77827941e-01, 3.16227766e-01, 5.62341325e-01,
           1.00000000e+00, 1.77827941e+00, 3.16227766e+00, 5.62341325e+00,
           1.00000000e+01, 1.77827941e+01, 3.16227766e+01, 5.62341325e+01,
           1.00000000e+02, 1.77827941e+02, 3.16227766e+02, 5.62341325e+02,
           1.00000000e+03, 1.77827941e+03, 3.16227766e+03, 5.62341325e+03,
           1.00000000e+04, 1.77827941e+04, 3.16227766e+04, 5.62341325e+04,
           1.00000000e+05]),
                                                          &#x27;progress_bar&#x27;: False}))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d7cde8f7-490b-4ff0-9f8d-b90dfaecb990" type="checkbox" ><label for="d7cde8f7-490b-4ff0-9f8d-b90dfaecb990" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;Feature space 0&#x27;,
                                                     Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;Feature space 1&#x27;,
                                                     Kernelizer(),
                                                     slice(1000, 2000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;, random_state=42,
                                           solver_params={&#x27;alphas&#x27;: array([1.00000000e-05, 1.77827941e-05, 3.16227766e-05, 5.62341325e-05,
           1...
           1.00000000e-01, 1.77827941e-01, 3.16227766e-01, 5.62341325e-01,
           1.00000000e+00, 1.77827941e+00, 3.16227766e+00, 5.62341325e+00,
           1.00000000e+01, 1.77827941e+01, 3.16227766e+01, 5.62341325e+01,
           1.00000000e+02, 1.77827941e+02, 3.16227766e+02, 5.62341325e+02,
           1.00000000e+03, 1.77827941e+03, 3.16227766e+03, 5.62341325e+03,
           1.00000000e+04, 1.77827941e+04, 3.16227766e+04, 5.62341325e+04,
           1.00000000e+05]),
                                                          &#x27;progress_bar&#x27;: False}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="b9af9fbd-c2f9-4908-a549-37012eb1f5b6" type="checkbox" ><label for="b9af9fbd-c2f9-4908-a549-37012eb1f5b6" class="sk-toggleable__label sk-toggleable__label-arrow">columnkernelizer: ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[(&#x27;Feature space 0&#x27;, Kernelizer(),
                                    slice(0, 1000, None)),
                                   (&#x27;Feature space 1&#x27;, Kernelizer(),
                                    slice(1000, 2000, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1cbbbe93-4284-42e6-a9bf-a5dfa2406e74" type="checkbox" ><label for="1cbbbe93-4284-42e6-a9bf-a5dfa2406e74" class="sk-toggleable__label sk-toggleable__label-arrow">Feature space 0</label><div class="sk-toggleable__content"><pre>slice(0, 1000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="005b9994-a24d-4052-8820-980f8aaa7007" type="checkbox" ><label for="005b9994-a24d-4052-8820-980f8aaa7007" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ea10f2dc-4783-428a-9cf7-7a00367d522b" type="checkbox" ><label for="ea10f2dc-4783-428a-9cf7-7a00367d522b" class="sk-toggleable__label sk-toggleable__label-arrow">Feature space 1</label><div class="sk-toggleable__content"><pre>slice(1000, 2000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a3b7fdb8-21ac-4631-b0ed-5234833f3bbf" type="checkbox" ><label for="a3b7fdb8-21ac-4631-b0ed-5234833f3bbf" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4b416c2a-c25f-44ee-9f1b-336dc10723e1" type="checkbox" ><label for="4b416c2a-c25f-44ee-9f1b-336dc10723e1" class="sk-toggleable__label sk-toggleable__label-arrow">MultipleKernelRidgeCV</label><div class="sk-toggleable__content"><pre>MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;, random_state=42,
                          solver_params={&#x27;alphas&#x27;: array([1.00000000e-05, 1.77827941e-05, 3.16227766e-05, 5.62341325e-05,
           1.00000000e-04, 1.77827941e-04, 3.16227766e-04, 5.62341325e-04,
           1.00000000e-03, 1.77827941e-03, 3.16227766e-03, 5.62341325e-03,
           1.00000000e-02, 1.77827941e-02, 3.16227766e-02, 5.62341325e-02,
           1.00000000e-01, 1.77...341325e-01,
           1.00000000e+00, 1.77827941e+00, 3.16227766e+00, 5.62341325e+00,
           1.00000000e+01, 1.77827941e+01, 3.16227766e+01, 5.62341325e+01,
           1.00000000e+02, 1.77827941e+02, 3.16227766e+02, 5.62341325e+02,
           1.00000000e+03, 1.77827941e+03, 3.16227766e+03, 5.62341325e+03,
           1.00000000e+04, 1.77827941e+04, 3.16227766e+04, 5.62341325e+04,
           1.00000000e+05]),
                                         &#x27;progress_bar&#x27;: False})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 75-76

Then, we manually perfom a hyperparameter grid search for the kernel weights.

.. GENERATED FROM PYTHON SOURCE LINES 76-98

.. code-block:: default


    # Make the score method use `split=True` by default.
    model.score = partial(model.score, split=True)

    # Define the hyperparameter grid search.
    ratios = np.logspace(-4, 4, 41)
    candidates = np.array([1 - ratios / (1 + ratios), ratios / (1 + ratios)]).T

    # Loop over hyperparameter candidates
    split_r2_scores = []
    for candidate in bar(candidates, "Hyperparameter candidates"):
        # test one hyperparameter candidate at a time
        pipe[-1].solver_params["n_iter"] = candidate[None]
        pipe.fit(X_train, Y_train)

        # split the R2 score between both kernels
        scores = pipe.score(X_test, Y_test)
        split_r2_scores.append(backend.to_numpy(scores))

    # average scores over targets for plotting
    split_r2_scores_avg = np.array(split_r2_scores).mean(axis=2)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [                                        ] 0% | 0.00 sec | Hyperparameter candidates |     [                                        ] 2% | 0.81 sec | Hyperparameter candidates |     [.                                       ] 5% | 1.61 sec | Hyperparameter candidates |     [..                                      ] 7% | 2.38 sec | Hyperparameter candidates |     [...                                     ] 10% | 3.15 sec | Hyperparameter candidates |     [....                                    ] 12% | 3.95 sec | Hyperparameter candidates |     [.....                                   ] 15% | 4.73 sec | Hyperparameter candidates |     [......                                  ] 17% | 5.53 sec | Hyperparameter candidates |     [.......                                 ] 20% | 6.24 sec | Hyperparameter candidates |     [........                                ] 22% | 7.06 sec | Hyperparameter candidates |     [.........                               ] 24% | 7.89 sec | Hyperparameter candidates |     [..........                              ] 27% | 8.66 sec | Hyperparameter candidates |     [...........                             ] 29% | 9.41 sec | Hyperparameter candidates |     [............                            ] 32% | 10.24 sec | Hyperparameter candidates |     [.............                           ] 34% | 11.19 sec | Hyperparameter candidates |     [..............                          ] 37% | 12.01 sec | Hyperparameter candidates |     [...............                         ] 39% | 12.80 sec | Hyperparameter candidates |     [................                        ] 41% | 13.67 sec | Hyperparameter candidates |     [.................                       ] 44% | 14.45 sec | Hyperparameter candidates |     [..................                      ] 46% | 15.34 sec | Hyperparameter candidates |     [...................                     ] 49% | 16.17 sec | Hyperparameter candidates |     [....................                    ] 51% | 17.09 sec | Hyperparameter candidates |     [.....................                   ] 54% | 17.91 sec | Hyperparameter candidates |     [......................                  ] 56% | 18.72 sec | Hyperparameter candidates |     [.......................                 ] 59% | 19.47 sec | Hyperparameter candidates |     [........................                ] 61% | 20.13 sec | Hyperparameter candidates |     [.........................               ] 63% | 20.91 sec | Hyperparameter candidates |     [..........................              ] 66% | 21.71 sec | Hyperparameter candidates |     [...........................             ] 68% | 22.47 sec | Hyperparameter candidates |     [............................            ] 71% | 23.16 sec | Hyperparameter candidates |     [.............................           ] 73% | 23.86 sec | Hyperparameter candidates |     [..............................          ] 76% | 24.56 sec | Hyperparameter candidates |     [...............................         ] 78% | 25.27 sec | Hyperparameter candidates |     [................................        ] 80% | 25.91 sec | Hyperparameter candidates |     [.................................       ] 83% | 26.64 sec | Hyperparameter candidates |     [..................................      ] 85% | 27.30 sec | Hyperparameter candidates |     [...................................     ] 88% | 27.99 sec | Hyperparameter candidates |     [....................................    ] 90% | 28.74 sec | Hyperparameter candidates |     [.....................................   ] 93% | 29.42 sec | Hyperparameter candidates |     [......................................  ] 95% | 30.11 sec | Hyperparameter candidates |     [....................................... ] 98% | 30.91 sec | Hyperparameter candidates |     [........................................] 100% | 31.59 sec | Hyperparameter candidates | 




.. GENERATED FROM PYTHON SOURCE LINES 99-104

Plot the variance decomposition for all the hyperparameter ratios.

For a ratio of 1e-3, feature space 0 is almost not used. For a ratio of 1e3,
feature space 1 is almost not used. The best ratio is here around 1, because
the feature spaces are used with similar scales in the simulated dataset.

.. GENERATED FROM PYTHON SOURCE LINES 104-119

.. code-block:: default


    fig, ax = plt.subplots(figsize=(5, 4))
    accumulator = np.zeros_like(ratios)
    for split in split_r2_scores_avg.T:
        ax.fill_between(ratios, accumulator, accumulator + split, alpha=0.7)
        accumulator += split

    ax.set(xscale='log')
    ax.set(xlabel=r"Ratio of kernel weight ($\gamma_A / \gamma_B$)")
    ax.set(ylabel=r"$R^2$ score (test set)")
    ax.set(title=r"$R^2$ score decomposition")
    ax.legend(feature_names, loc="upper left")
    ax.grid()
    fig.tight_layout()
    plt.show()



.. image-sg:: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_3_path_001.png
   :alt: $R^2$ score decomposition
   :srcset: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_3_path_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  31.822 seconds)


.. _sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_3_path.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mkr_3_path.py <plot_mkr_3_path.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mkr_3_path.ipynb <plot_mkr_3_path.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
