
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/multiple_kernel_ridge/plot_mkr_2_solvers.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_2_solvers.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_multiple_kernel_ridge_plot_mkr_2_solvers.py:


Multiple-kernel ridge solvers
=============================
This example demonstrates the different strategies to solve the multiple kernel
ridge regression: the *random search*, and the *hyper-gradient descent*.

The *random-search* strategy samples some kernel weights vectors from a
Dirichlet distribution, then for each vector, it fits a ``KernelRidgeCV`` model
and computes a cross-validation score for all targets. Then it selects for each
target the kernel weight vector leading to the highest cross-validation score
(e.g. the highest `R^2` value). Extensively sampling the kernel weights space
is exponentially expensive with the number of kernels, therefore this method is
computationally expensive for a large number of kernels. However, since it
reuses most of the computations for all targets, it scales very well with the
number of targets.

The *hyper-gradient descent* strategy takes a different route. It starts with
an initial kernel weights vector per target, and updates it iteratively
following the hyperparameter gradient, computed over cross-validation. As it
computes a hyper-gradient descent for each target, it is more expensive
computationally for large number of targets. However, the hyper-gradient
descent scales very well with the number of kernels.

.. GENERATED FROM PYTHON SOURCE LINES 24-40

.. code-block:: default

    import numpy as np
    import matplotlib.pyplot as plt

    from himalaya.backend import set_backend
    from himalaya.kernel_ridge import generate_dirichlet_samples

    from himalaya.kernel_ridge import KernelRidgeCV
    from himalaya.kernel_ridge import MultipleKernelRidgeCV
    from himalaya.kernel_ridge import Kernelizer
    from himalaya.kernel_ridge import ColumnKernelizer
    from himalaya.utils import generate_multikernel_dataset

    from sklearn.pipeline import make_pipeline
    from sklearn import set_config
    set_config(display='diagram')








.. GENERATED FROM PYTHON SOURCE LINES 42-43

In this example, we use the ``torch_cuda`` backend, and fit the model on GPU.

.. GENERATED FROM PYTHON SOURCE LINES 43-46

.. code-block:: default


    backend = set_backend("torch_cuda", on_error="warn")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/himalaya/himalaya/himalaya/backend/_utils.py:56: UserWarning: Setting backend to torch_cuda failed: PyTorch with CUDA is not available..Falling back to numpy backend.
      warnings.warn(f"Setting backend to {backend} failed: {str(error)}."




.. GENERATED FROM PYTHON SOURCE LINES 47-51

Generate a random dataset
-------------------------
We start by generating some arbitrary scalings per kernel and targets, using
samples on a Dirichlet distribution.

.. GENERATED FROM PYTHON SOURCE LINES 51-56

.. code-block:: default


    n_kernels = 3
    n_targets = 50
    n_clusters = 2








.. GENERATED FROM PYTHON SOURCE LINES 57-58

To create some clusters of weights, we take a few kernel weights samples.

.. GENERATED FROM PYTHON SOURCE LINES 58-62

.. code-block:: default

    kernel_weights = generate_dirichlet_samples(n_clusters, n_kernels,
                                                concentration=[.3],
                                                random_state=105)








.. GENERATED FROM PYTHON SOURCE LINES 63-64

Then, we duplicate them, and add some noise, to get clusters.

.. GENERATED FROM PYTHON SOURCE LINES 64-73

.. code-block:: default

    noise = 0.05
    kernel_weights = backend.to_numpy(kernel_weights)
    kernel_weights = np.tile(kernel_weights, (n_targets // n_clusters, 1))
    kernel_weights += np.random.randn(n_targets, n_kernels) * noise

    # We finish with a projection on the simplex, making kernel weights sum to one.
    kernel_weights[kernel_weights < 0] = 0.
    kernel_weights /= np.sum(kernel_weights, 1)[:, None]








.. GENERATED FROM PYTHON SOURCE LINES 74-80

Then, we generate a random dataset, using the arbitrary scalings.

- X_train : array of shape (n_samples_train, n_features)
- X_test : array of shape (n_samples_test, n_features)
- Y_train : array of shape (n_samples_train, n_targets)
- Y_test : array of shape (n_samples_test, n_targets)

.. GENERATED FROM PYTHON SOURCE LINES 80-88

.. code-block:: default


    (X_train, X_test, Y_train, Y_test,
     kernel_weights, n_features_list) = generate_multikernel_dataset(
         n_kernels=n_kernels, n_targets=n_targets, n_samples_train=600,
         n_samples_test=300, kernel_weights=kernel_weights, random_state=42)

    feature_names = [f"Feature space {ii}" for ii in range(len(n_features_list))]








.. GENERATED FROM PYTHON SOURCE LINES 89-93

Define a ``ColumnKernelizer``
-----------------------------
We define a column kernelizer, which we will use to precompute the kernels in
a pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 93-105

.. code-block:: default


    # Find the start and end of each feature space X in Xs
    start_and_end = np.concatenate([[0], np.cumsum(n_features_list)])
    slices = [
        slice(start, end)
        for start, end in zip(start_and_end[:-1], start_and_end[1:])
    ]

    kernelizers = [(name, Kernelizer(), slice_)
                   for name, slice_ in zip(feature_names, slices)]
    column_kernelizer = ColumnKernelizer(kernelizers)








.. GENERATED FROM PYTHON SOURCE LINES 106-109

Define the models
-----------------
We define the first model, using the random search solver.

.. GENERATED FROM PYTHON SOURCE LINES 109-124

.. code-block:: default


    # (We pregenerate the Dirichlet random samples, to latter plot them.)
    kernel_weights_sampled = generate_dirichlet_samples(n_samples=20,
                                                        n_kernels=n_kernels,
                                                        concentration=[1.],
                                                        random_state=0)

    alphas = np.logspace(-10, 10, 41)
    solver_params = dict(n_iter=kernel_weights_sampled, alphas=alphas,
                         n_targets_batch=200, n_alphas_batch=20,
                         n_targets_batch_refit=200, jitter_alphas=True)

    model_1 = MultipleKernelRidgeCV(kernels="precomputed", solver="random_search",
                                    solver_params=solver_params)








.. GENERATED FROM PYTHON SOURCE LINES 125-126

We define the second model, using the hyper_gradient solver.

.. GENERATED FROM PYTHON SOURCE LINES 126-134

.. code-block:: default


    solver_params = dict(max_iter=30, n_targets_batch=200, tol=1e-3,
                         initial_deltas="ridgecv", max_iter_inner_hyper=1,
                         hyper_gradient_method="direct")

    model_2 = MultipleKernelRidgeCV(kernels="precomputed", solver="hyper_gradient",
                                    solver_params=solver_params)








.. GENERATED FROM PYTHON SOURCE LINES 135-136

We fit the two models on the train data.

.. GENERATED FROM PYTHON SOURCE LINES 136-140

.. code-block:: default


    pipe_1 = make_pipeline(column_kernelizer, model_1)
    pipe_1.fit(X_train, Y_train)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [                                        ] 0% | 0.00 sec | 20 random sampling with cv |     [..                                      ] 5% | 0.91 sec | 20 random sampling with cv |     [....                                    ] 10% | 1.73 sec | 20 random sampling with cv |     [......                                  ] 15% | 2.42 sec | 20 random sampling with cv |     [........                                ] 20% | 3.20 sec | 20 random sampling with cv |     [..........                              ] 25% | 3.94 sec | 20 random sampling with cv |     [............                            ] 30% | 4.53 sec | 20 random sampling with cv |     [..............                          ] 35% | 5.25 sec | 20 random sampling with cv |     [................                        ] 40% | 6.03 sec | 20 random sampling with cv |     [..................                      ] 45% | 6.86 sec | 20 random sampling with cv |     [....................                    ] 50% | 7.63 sec | 20 random sampling with cv |     [......................                  ] 55% | 8.32 sec | 20 random sampling with cv |     [........................                ] 60% | 9.09 sec | 20 random sampling with cv |     [..........................              ] 65% | 9.77 sec | 20 random sampling with cv |     [............................            ] 70% | 10.51 sec | 20 random sampling with cv |     [..............................          ] 75% | 11.31 sec | 20 random sampling with cv |     [................................        ] 80% | 11.99 sec | 20 random sampling with cv |     [..................................      ] 85% | 12.65 sec | 20 random sampling with cv |     [....................................    ] 90% | 13.37 sec | 20 random sampling with cv |     [......................................  ] 95% | 14.10 sec | 20 random sampling with cv |     [........................................] 100% | 14.85 sec | 20 random sampling with cv | 


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-42bec708-13be-4207-a175-3631cf27e71a {color: black;background-color: white;}#sk-42bec708-13be-4207-a175-3631cf27e71a pre{padding: 0;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-toggleable {background-color: white;}#sk-42bec708-13be-4207-a175-3631cf27e71a label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-42bec708-13be-4207-a175-3631cf27e71a label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-42bec708-13be-4207-a175-3631cf27e71a label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-42bec708-13be-4207-a175-3631cf27e71a input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-42bec708-13be-4207-a175-3631cf27e71a input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-42bec708-13be-4207-a175-3631cf27e71a input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-estimator:hover {background-color: #d4ebff;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-item {z-index: 1;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-parallel-item:only-child::after {width: 0;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-42bec708-13be-4207-a175-3631cf27e71a div.sk-text-repr-fallback {display: none;}</style><div id="sk-42bec708-13be-4207-a175-3631cf27e71a" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;Feature space 0&#x27;,
                                                     Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;Feature space 1&#x27;,
                                                     Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;Feature space 2&#x27;,
                                                     Kernelizer(),
                                                     slice(2000, 3000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;,
                                           solver_params={&#x27;alphas&#x27;: array([1.00000000e-10, 3.1622776...
           [0.46154885, 0.01041838, 0.52803277],
           [0.19793179, 0.20055514, 0.60151307],
           [0.52888616, 0.20576417, 0.26534967],
           [0.50744124, 0.02635203, 0.46620673],
           [0.74796126, 0.15907966, 0.09295908],
           [0.22617954, 0.26983245, 0.50398801],
           [0.11233178, 0.86672533, 0.0209429 ],
           [0.15950187, 0.11975399, 0.72074414],
           [0.24333979, 0.52315424, 0.23350597]]),
                                                          &#x27;n_targets_batch&#x27;: 200,
                                                          &#x27;n_targets_batch_refit&#x27;: 200}))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0b150514-8ea7-4f85-9e1f-492c3614e029" type="checkbox" ><label for="0b150514-8ea7-4f85-9e1f-492c3614e029" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;Feature space 0&#x27;,
                                                     Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;Feature space 1&#x27;,
                                                     Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;Feature space 2&#x27;,
                                                     Kernelizer(),
                                                     slice(2000, 3000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;,
                                           solver_params={&#x27;alphas&#x27;: array([1.00000000e-10, 3.1622776...
           [0.46154885, 0.01041838, 0.52803277],
           [0.19793179, 0.20055514, 0.60151307],
           [0.52888616, 0.20576417, 0.26534967],
           [0.50744124, 0.02635203, 0.46620673],
           [0.74796126, 0.15907966, 0.09295908],
           [0.22617954, 0.26983245, 0.50398801],
           [0.11233178, 0.86672533, 0.0209429 ],
           [0.15950187, 0.11975399, 0.72074414],
           [0.24333979, 0.52315424, 0.23350597]]),
                                                          &#x27;n_targets_batch&#x27;: 200,
                                                          &#x27;n_targets_batch_refit&#x27;: 200}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="54efeda2-e256-451a-8999-28fda1938b76" type="checkbox" ><label for="54efeda2-e256-451a-8999-28fda1938b76" class="sk-toggleable__label sk-toggleable__label-arrow">columnkernelizer: ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[(&#x27;Feature space 0&#x27;, Kernelizer(),
                                    slice(0, 1000, None)),
                                   (&#x27;Feature space 1&#x27;, Kernelizer(),
                                    slice(1000, 2000, None)),
                                   (&#x27;Feature space 2&#x27;, Kernelizer(),
                                    slice(2000, 3000, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="50bc6043-f47b-448a-93bd-baa0812d319c" type="checkbox" ><label for="50bc6043-f47b-448a-93bd-baa0812d319c" class="sk-toggleable__label sk-toggleable__label-arrow">Feature space 0</label><div class="sk-toggleable__content"><pre>slice(0, 1000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8a105995-d236-463f-8fcb-4d60f9a42878" type="checkbox" ><label for="8a105995-d236-463f-8fcb-4d60f9a42878" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="86a3d2fc-b4b5-4cbe-8a5d-ddf5d47e12d9" type="checkbox" ><label for="86a3d2fc-b4b5-4cbe-8a5d-ddf5d47e12d9" class="sk-toggleable__label sk-toggleable__label-arrow">Feature space 1</label><div class="sk-toggleable__content"><pre>slice(1000, 2000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4e1ea3ea-6cd1-4e44-9f27-a36189f98f95" type="checkbox" ><label for="4e1ea3ea-6cd1-4e44-9f27-a36189f98f95" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="461bd1c1-606e-4e93-aa64-4d31714e9ed8" type="checkbox" ><label for="461bd1c1-606e-4e93-aa64-4d31714e9ed8" class="sk-toggleable__label sk-toggleable__label-arrow">Feature space 2</label><div class="sk-toggleable__content"><pre>slice(2000, 3000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ab2a389d-f381-42da-a3a9-e6f690269e49" type="checkbox" ><label for="ab2a389d-f381-42da-a3a9-e6f690269e49" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="24c882ab-7acf-4361-a147-a96834cbbcf6" type="checkbox" ><label for="24c882ab-7acf-4361-a147-a96834cbbcf6" class="sk-toggleable__label sk-toggleable__label-arrow">MultipleKernelRidgeCV</label><div class="sk-toggleable__content"><pre>MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;,
                          solver_params={&#x27;alphas&#x27;: array([1.00000000e-10, 3.16227766e-10, 1.00000000e-09, 3.16227766e-09,
           1.00000000e-08, 3.16227766e-08, 1.00000000e-07, 3.16227766e-07,
           1.00000000e-06, 3.16227766e-06, 1.00000000e-05, 3.16227766e-05,
           1.00000000e-04, 3.16227766e-04, 1.00000000e-03, 3.16227766e-03,
           1.00000000e-02, 3.16227766e-02, 1.000...
           [0.46154885, 0.01041838, 0.52803277],
           [0.19793179, 0.20055514, 0.60151307],
           [0.52888616, 0.20576417, 0.26534967],
           [0.50744124, 0.02635203, 0.46620673],
           [0.74796126, 0.15907966, 0.09295908],
           [0.22617954, 0.26983245, 0.50398801],
           [0.11233178, 0.86672533, 0.0209429 ],
           [0.15950187, 0.11975399, 0.72074414],
           [0.24333979, 0.52315424, 0.23350597]]),
                                         &#x27;n_targets_batch&#x27;: 200,
                                         &#x27;n_targets_batch_refit&#x27;: 200})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 141-144

.. code-block:: default

    pipe_2 = make_pipeline(column_kernelizer, model_2)
    pipe_2.fit(X_train, Y_train)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [                                        ] 0% | 0.00 sec | hypergradient_direct |     [                                        ] 0% | 0.00 sec | hypergradient_direct |     [.                                       ] 3% | 4.19 sec | hypergradient_direct |     [..                                      ] 7% | 4.53 sec | hypergradient_direct |     [....                                    ] 10% | 4.86 sec | hypergradient_direct |     [.....                                   ] 13% | 5.20 sec | hypergradient_direct |     [......                                  ] 17% | 5.53 sec | hypergradient_direct |     [........                                ] 20% | 5.87 sec | hypergradient_direct |     [.........                               ] 23% | 6.21 sec | hypergradient_direct |     [..........                              ] 27% | 6.54 sec | hypergradient_direct |     [............                            ] 30% | 6.88 sec | hypergradient_direct |     [.............                           ] 33% | 7.21 sec | hypergradient_direct |     [..............                          ] 37% | 7.55 sec | hypergradient_direct |     [................                        ] 40% | 7.89 sec | hypergradient_direct |     [.................                       ] 43% | 8.22 sec | hypergradient_direct |     [..................                      ] 47% | 8.56 sec | hypergradient_direct |     [....................                    ] 50% | 8.89 sec | hypergradient_direct |     [.....................                   ] 53% | 9.23 sec | hypergradient_direct |     [......................                  ] 57% | 9.56 sec | hypergradient_direct |     [........................                ] 60% | 9.90 sec | hypergradient_direct |     [.........................               ] 63% | 10.24 sec | hypergradient_direct |     [..........................              ] 67% | 10.57 sec | hypergradient_direct |     [............................            ] 70% | 10.91 sec | hypergradient_direct |     [.............................           ] 73% | 11.24 sec | hypergradient_direct |     [..............................          ] 77% | 11.58 sec | hypergradient_direct |     [................................        ] 80% | 11.92 sec | hypergradient_direct |     [.................................       ] 83% | 12.25 sec | hypergradient_direct |     [..................................      ] 87% | 12.59 sec | hypergradient_direct |     [....................................    ] 90% | 12.92 sec | hypergradient_direct |     [.....................................   ] 93% | 13.26 sec | hypergradient_direct |     [......................................  ] 97% | 13.59 sec | hypergradient_direct |     [........................................] 100% | 13.97 sec | hypergradient_direct | 


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e {color: black;background-color: white;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e pre{padding: 0;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-toggleable {background-color: white;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-estimator:hover {background-color: #d4ebff;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-item {z-index: 1;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-parallel-item:only-child::after {width: 0;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-463f810b-9adf-44cd-8300-1616ca2c1d6e div.sk-text-repr-fallback {display: none;}</style><div id="sk-463f810b-9adf-44cd-8300-1616ca2c1d6e" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;Feature space 0&#x27;,
                                                     Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;Feature space 1&#x27;,
                                                     Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;Feature space 2&#x27;,
                                                     Kernelizer(),
                                                     slice(2000, 3000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;,
                                           solver=&#x27;hyper_gradient&#x27;,
                                           solver_params={&#x27;hyper_gradient_method&#x27;: &#x27;direct&#x27;,
                                                          &#x27;initial_deltas&#x27;: &#x27;ridgecv&#x27;,
                                                          &#x27;max_iter&#x27;: 30,
                                                          &#x27;max_iter_inner_hyper&#x27;: 1,
                                                          &#x27;n_targets_batch&#x27;: 200,
                                                          &#x27;tol&#x27;: 0.001}))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f86005a0-d3e7-4f4d-ab7f-8f275b027349" type="checkbox" ><label for="f86005a0-d3e7-4f4d-ab7f-8f275b027349" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;Feature space 0&#x27;,
                                                     Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;Feature space 1&#x27;,
                                                     Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;Feature space 2&#x27;,
                                                     Kernelizer(),
                                                     slice(2000, 3000, None))])),
                    (&#x27;multiplekernelridgecv&#x27;,
                     MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;,
                                           solver=&#x27;hyper_gradient&#x27;,
                                           solver_params={&#x27;hyper_gradient_method&#x27;: &#x27;direct&#x27;,
                                                          &#x27;initial_deltas&#x27;: &#x27;ridgecv&#x27;,
                                                          &#x27;max_iter&#x27;: 30,
                                                          &#x27;max_iter_inner_hyper&#x27;: 1,
                                                          &#x27;n_targets_batch&#x27;: 200,
                                                          &#x27;tol&#x27;: 0.001}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2d6bd471-0862-49aa-8546-80a7cc7120be" type="checkbox" ><label for="2d6bd471-0862-49aa-8546-80a7cc7120be" class="sk-toggleable__label sk-toggleable__label-arrow">columnkernelizer: ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[(&#x27;Feature space 0&#x27;, Kernelizer(),
                                    slice(0, 1000, None)),
                                   (&#x27;Feature space 1&#x27;, Kernelizer(),
                                    slice(1000, 2000, None)),
                                   (&#x27;Feature space 2&#x27;, Kernelizer(),
                                    slice(2000, 3000, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="8f635fa7-d23c-4da5-bbf6-f780ccb9fc1e" type="checkbox" ><label for="8f635fa7-d23c-4da5-bbf6-f780ccb9fc1e" class="sk-toggleable__label sk-toggleable__label-arrow">Feature space 0</label><div class="sk-toggleable__content"><pre>slice(0, 1000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="c7644c8b-44ea-4752-9f82-05b391fa80fa" type="checkbox" ><label for="c7644c8b-44ea-4752-9f82-05b391fa80fa" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="637f6c90-850a-4d05-8424-08dbfc22b6f2" type="checkbox" ><label for="637f6c90-850a-4d05-8424-08dbfc22b6f2" class="sk-toggleable__label sk-toggleable__label-arrow">Feature space 1</label><div class="sk-toggleable__content"><pre>slice(1000, 2000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3b586db0-ef67-47cb-83a9-1c04af9d32d7" type="checkbox" ><label for="3b586db0-ef67-47cb-83a9-1c04af9d32d7" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="4185e95d-9e8b-4f72-a954-d14ca9b2da03" type="checkbox" ><label for="4185e95d-9e8b-4f72-a954-d14ca9b2da03" class="sk-toggleable__label sk-toggleable__label-arrow">Feature space 2</label><div class="sk-toggleable__content"><pre>slice(2000, 3000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e56e9e9d-6e36-4605-a146-3cf774baaa31" type="checkbox" ><label for="e56e9e9d-6e36-4605-a146-3cf774baaa31" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0fca4ee5-8f30-4cad-b1db-6f99dc2bba24" type="checkbox" ><label for="0fca4ee5-8f30-4cad-b1db-6f99dc2bba24" class="sk-toggleable__label sk-toggleable__label-arrow">MultipleKernelRidgeCV</label><div class="sk-toggleable__content"><pre>MultipleKernelRidgeCV(kernels=&#x27;precomputed&#x27;, solver=&#x27;hyper_gradient&#x27;,
                          solver_params={&#x27;hyper_gradient_method&#x27;: &#x27;direct&#x27;,
                                         &#x27;initial_deltas&#x27;: &#x27;ridgecv&#x27;,
                                         &#x27;max_iter&#x27;: 30, &#x27;max_iter_inner_hyper&#x27;: 1,
                                         &#x27;n_targets_batch&#x27;: 200, &#x27;tol&#x27;: 0.001})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 145-152

Plot the convergence curves
---------------------------
First convergence curve.

For the random search, ``cv_scores`` gives the scores for each sampled kernel
weights vector. The convergence curve is thus the current maximum for each
target.

.. GENERATED FROM PYTHON SOURCE LINES 152-164

.. code-block:: default

    cv_scores = backend.to_numpy(pipe_1[1].cv_scores_)
    current_max = np.maximum.accumulate(cv_scores, axis=0)
    mean_current_max = np.mean(current_max, axis=1)

    x_array = np.arange(1, len(mean_current_max) + 1)
    plt.plot(x_array, mean_current_max, '-o')
    plt.grid("on")
    plt.xlabel("Number of kernel weights sampled")
    plt.ylabel("L2 negative loss (higher is better)")
    plt.title("Convergence curve, averaged over targets")
    plt.show()




.. image-sg:: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_2_solvers_001.png
   :alt: Convergence curve, averaged over targets
   :srcset: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_2_solvers_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 165-166

Plot the second convergence curve.

.. GENERATED FROM PYTHON SOURCE LINES 166-178

.. code-block:: default


    cv_scores = backend.to_numpy(pipe_2[1].cv_scores_)
    mean_cv_scores = np.mean(cv_scores, axis=1)

    x_array = np.arange(1, len(mean_cv_scores) + 1)
    plt.plot(x_array, mean_cv_scores, '-o')
    plt.grid("on")
    plt.xlabel("Number of gradient iterations")
    plt.ylabel("L2 negative loss (higher is better)")
    plt.title("Convergence curve, averaged over targets")
    plt.show()




.. image-sg:: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_2_solvers_002.png
   :alt: Convergence curve, averaged over targets
   :srcset: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_2_solvers_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 179-184

Compare with a ``KernelRidgeCV``
--------------------------------
Compare to a baseline ``KernelRidgeCV`` model with all the concatenated
features. Comparison is performed using the prediction scores on the test
set.

.. GENERATED FROM PYTHON SOURCE LINES 184-189

.. code-block:: default


    # Fit the baseline model ``KernelRidgeCV``
    baseline = KernelRidgeCV(kernel="linear", alphas=alphas)
    baseline.fit(X_train, Y_train)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-25d2a946-c743-4161-abe4-4a67e2c188aa {color: black;background-color: white;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa pre{padding: 0;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-toggleable {background-color: white;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-estimator:hover {background-color: #d4ebff;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-item {z-index: 1;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-parallel-item:only-child::after {width: 0;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-25d2a946-c743-4161-abe4-4a67e2c188aa div.sk-text-repr-fallback {display: none;}</style><div id="sk-25d2a946-c743-4161-abe4-4a67e2c188aa" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>KernelRidgeCV(alphas=array([1.00000000e-10, 3.16227766e-10, 1.00000000e-09, 3.16227766e-09,
           1.00000000e-08, 3.16227766e-08, 1.00000000e-07, 3.16227766e-07,
           1.00000000e-06, 3.16227766e-06, 1.00000000e-05, 3.16227766e-05,
           1.00000000e-04, 3.16227766e-04, 1.00000000e-03, 3.16227766e-03,
           1.00000000e-02, 3.16227766e-02, 1.00000000e-01, 3.16227766e-01,
           1.00000000e+00, 3.16227766e+00, 1.00000000e+01, 3.16227766e+01,
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]))</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="506d8a7e-2ced-4c91-b196-60d554b2eb70" type="checkbox" checked><label for="506d8a7e-2ced-4c91-b196-60d554b2eb70" class="sk-toggleable__label sk-toggleable__label-arrow">KernelRidgeCV</label><div class="sk-toggleable__content"><pre>KernelRidgeCV(alphas=array([1.00000000e-10, 3.16227766e-10, 1.00000000e-09, 3.16227766e-09,
           1.00000000e-08, 3.16227766e-08, 1.00000000e-07, 3.16227766e-07,
           1.00000000e-06, 3.16227766e-06, 1.00000000e-05, 3.16227766e-05,
           1.00000000e-04, 3.16227766e-04, 1.00000000e-03, 3.16227766e-03,
           1.00000000e-02, 3.16227766e-02, 1.00000000e-01, 3.16227766e-01,
           1.00000000e+00, 3.16227766e+00, 1.00000000e+01, 3.16227766e+01,
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]))</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 190-191

Compute scores of all models

.. GENERATED FROM PYTHON SOURCE LINES 191-200

.. code-block:: default

    scores_1 = pipe_1.score(X_test, Y_test)
    scores_1 = backend.to_numpy(scores_1)

    scores_2 = pipe_2.score(X_test, Y_test)
    scores_2 = backend.to_numpy(scores_2)

    scores_baseline = baseline.score(X_test, Y_test)
    scores_baseline = backend.to_numpy(scores_baseline)








.. GENERATED FROM PYTHON SOURCE LINES 201-202

Plot histograms

.. GENERATED FROM PYTHON SOURCE LINES 202-213

.. code-block:: default

    bins = np.linspace(0, 1, 50)
    plt.hist(scores_baseline, bins, alpha=0.7, label="KernelRidgeCV")
    plt.hist(scores_1, bins, alpha=0.7,
             label="MultipleKernelRidgeCV(solver='random_search')")
    plt.hist(scores_2, bins, alpha=0.7,
             label="MultipleKernelRidgeCV(solver='hyper_gradient')")
    plt.xlabel(r"$R^2$ generalization score")
    plt.title("Histogram over targets")
    plt.legend()
    plt.show()




.. image-sg:: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_2_solvers_003.png
   :alt: Histogram over targets
   :srcset: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_2_solvers_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 214-218

Generate trajectories
---------------------
Refit the second model with different number of iterations, just to plot the
trajectories.

.. GENERATED FROM PYTHON SOURCE LINES 218-232

.. code-block:: default


    all_kernel_weights_2 = [
        np.full((n_targets, n_kernels), fill_value=1. / n_kernels),
    ]
    max_iter = model_2.solver_params["max_iter"]
    for n_iter in np.unique(np.int_(np.logspace(0, np.log10(max_iter), 3))):
        # change the number of iteration and refit from scratch
        pipe_2[1].solver_params['max_iter'] = n_iter
        pipe_2.fit(X_train, Y_train)

        kernel_weights_2 = np.exp(backend.to_numpy(pipe_2[1].deltas_.T))
        kernel_weights_2 /= kernel_weights_2.sum(1)[:, None]
        all_kernel_weights_2.append(kernel_weights_2)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [                                        ] 0% | 0.00 sec | hypergradient_direct |     [                                        ] 0% | 0.00 sec | hypergradient_direct |     [........................................] 100% | 4.22 sec | hypergradient_direct | 
    [                                        ] 0% | 0.00 sec | hypergradient_direct |     [                                        ] 0% | 0.00 sec | hypergradient_direct |     [........                                ] 20% | 4.19 sec | hypergradient_direct |     [................                        ] 40% | 4.52 sec | hypergradient_direct |     [........................                ] 60% | 4.86 sec | hypergradient_direct |     [................................        ] 80% | 5.20 sec | hypergradient_direct |     [........................................] 100% | 5.58 sec | hypergradient_direct | 
    [                                        ] 0% | 0.00 sec | hypergradient_direct |     [                                        ] 0% | 0.00 sec | hypergradient_direct |     [.                                       ] 3% | 4.19 sec | hypergradient_direct |     [..                                      ] 7% | 4.52 sec | hypergradient_direct |     [....                                    ] 10% | 4.86 sec | hypergradient_direct |     [.....                                   ] 14% | 5.20 sec | hypergradient_direct |     [......                                  ] 17% | 5.53 sec | hypergradient_direct |     [........                                ] 21% | 5.87 sec | hypergradient_direct |     [.........                               ] 24% | 6.21 sec | hypergradient_direct |     [...........                             ] 28% | 6.54 sec | hypergradient_direct |     [............                            ] 31% | 6.88 sec | hypergradient_direct |     [.............                           ] 34% | 7.21 sec | hypergradient_direct |     [...............                         ] 38% | 7.55 sec | hypergradient_direct |     [................                        ] 41% | 7.89 sec | hypergradient_direct |     [.................                       ] 45% | 8.22 sec | hypergradient_direct |     [...................                     ] 48% | 8.56 sec | hypergradient_direct |     [....................                    ] 52% | 8.90 sec | hypergradient_direct |     [......................                  ] 55% | 9.23 sec | hypergradient_direct |     [.......................                 ] 59% | 9.57 sec | hypergradient_direct |     [........................                ] 62% | 9.91 sec | hypergradient_direct |     [..........................              ] 66% | 10.24 sec | hypergradient_direct |     [...........................             ] 69% | 10.58 sec | hypergradient_direct |     [............................            ] 72% | 10.91 sec | hypergradient_direct |     [..............................          ] 76% | 11.25 sec | hypergradient_direct |     [...............................         ] 79% | 11.59 sec | hypergradient_direct |     [.................................       ] 83% | 11.92 sec | hypergradient_direct |     [..................................      ] 86% | 12.26 sec | hypergradient_direct |     [...................................     ] 90% | 12.60 sec | hypergradient_direct |     [.....................................   ] 93% | 12.93 sec | hypergradient_direct |     [......................................  ] 97% | 13.27 sec | hypergradient_direct |     [........................................] 100% | 13.65 sec | hypergradient_direct | 




.. GENERATED FROM PYTHON SOURCE LINES 233-234

Get the normalized kernel weights for the first model

.. GENERATED FROM PYTHON SOURCE LINES 234-237

.. code-block:: default

    kernel_weights_1 = np.exp(backend.to_numpy(pipe_1[1].deltas_.T))
    kernel_weights_1 /= kernel_weights_1.sum(1)[:, None]








.. GENERATED FROM PYTHON SOURCE LINES 238-249

Plot on the simplex
-------------------
Finally, we visualize the obtained kernel weights vector, projected on the
simplex. The simplex is the space of positive weights that sum to one, and it
has a triangular shape in dimension 3.

We plot on three different panels:

- the kernel weights used in the simulated data
- the kernel weights sampled during random search, and the best ones
- the kernel weights trajectories obtained during hyper-gradient descent

.. GENERATED FROM PYTHON SOURCE LINES 249-322

.. code-block:: default



    def _create_simplex_projection_and_edges(ax):
        """Create a projection on the 3D simplex, and plot edges."""
        n_kernels = 3

        if ax is None:
            ax = plt.gca()

        # create a projection in 2D
        from sklearn.decomposition import PCA
        kernel_weights = generate_dirichlet_samples(10000, n_kernels,
                                                    concentration=[1.],
                                                    random_state=0)
        pca = PCA(2).fit(backend.to_numpy(kernel_weights))

        # add simplex edges
        edges = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]])
        edges = pca.transform(edges).T

        # add tripod at origin
        tripod_length = 0.15
        tripod = np.array([[0, 0, 0], [tripod_length, 0, 0], [0, 0, 0],
                           [0, tripod_length, 0], [0, 0, 0], [0, 0,
                                                              tripod_length]])
        tripod = pca.transform(tripod).T

        # add point legend
        points = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
        labels = points.copy()
        points = pca.transform(points * 1.15).T
        for (xx, yy), label in zip(points.T, labels):
            ax.text(xx, yy, str(label), horizontalalignment='center',
                    verticalalignment='center')

        if ax is None:
            plt.figure(figsize=(8, 8))
            ax = plt.gca()
        ax.plot(edges[0], edges[1], c='gray')
        ax.plot(tripod[0], tripod[1], c='gray')
        ax.axis('equal')
        ax.axis('off')
        return ax, pca


    def plot_simplex(X, ax=None, **kwargs):
        """Plot a set of points in the 3D simplex."""
        ax, pca = _create_simplex_projection_and_edges(ax=ax)

        Xt = pca.transform(X).T
        ax.scatter(Xt[0], Xt[1], **kwargs)
        ax.legend()
        return ax


    def plot_simplex_trajectory(Xs, ax=None):
        """Plot a series of trajectory in the 3D simplex."""
        ax, pca = _create_simplex_projection_and_edges(ax=ax)

        trajectories = []
        for Xi in Xs:
            Xt = pca.transform(Xi).T
            trajectories.append(Xt)
        trajectories = np.array(trajectories)

        for trajectory in trajectories.T:
            ax.plot(trajectory[0], trajectory[1], linewidth=1, color="C0",
                    zorder=1)
            ax.scatter(trajectory[0, -1], trajectory[1, -1], color="C1", zorder=2)

        return ax









.. GENERATED FROM PYTHON SOURCE LINES 323-352

.. code-block:: default

    fig, axs = plt.subplots(1, 3, figsize=(12, 4))

    # selection of targets
    selection = slice(0, 50)

    # First panel
    ax = axs[0]
    ax.set_title("(a) Ground truth", y=0)
    plot_simplex(kernel_weights[selection], ax=ax, color='C2',
                 label="true weights")

    # Second panel
    ax = axs[1]
    ax.set_title("(b) Random search", y=0)
    plot_simplex(backend.to_numpy(kernel_weights_sampled), ax=ax, marker='+',
                 label="random candidates", zorder=10)
    plot_simplex(kernel_weights_1[selection], ax=axs[1],
                 label="selected candidates")

    # Third panel
    ax = axs[2]
    ax.set_title("(c) Gradient descent", y=0)
    plot_simplex_trajectory([aa[selection] for aa in all_kernel_weights_2], ax=ax)
    ax.legend([ax.lines[2], ax.collections[0]],
              ['gradient trajectory', 'final point'])

    plt.tight_layout()
    # fig.savefig('simulation.pdf', dpi=150, bbox_inches='tight', pad_inches=0)
    plt.show()



.. image-sg:: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_2_solvers_004.png
   :alt: (a) Ground truth, (b) Random search, (c) Gradient descent
   :srcset: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_2_solvers_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  7.869 seconds)


.. _sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_2_solvers.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mkr_2_solvers.py <plot_mkr_2_solvers.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mkr_2_solvers.ipynb <plot_mkr_2_solvers.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
