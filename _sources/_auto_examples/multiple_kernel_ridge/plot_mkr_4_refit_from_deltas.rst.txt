
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/multiple_kernel_ridge/plot_mkr_4_refit_from_deltas.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_4_refit_from_deltas.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_multiple_kernel_ridge_plot_mkr_4_refit_from_deltas.py:


Multiple-kernel ridge fit from fixed hyper-parameters
=====================================================
This example demonstrates how to fit a multiple-kernel ridge model with fixed
hyper-parameters. Here are three different usecases:

- If the kernel weights hyper-parameters are known and identical across
  targets, the kernels can be scaled and summed, and a simple KernelRidgeCV can
  be used to fit the model.
- If the kernel weights hyper-parameters are unknown and different across
  targets, a MultipleKernelRidgeCV can be use to search the best
  hyper-parameters per target.
- If the kernel weights hyper-parameters are known and different across
  targets, a WeightedKernelRidge model can be used to fit the ridge models on
  each target independently.

This method can be used for example in the following workflow:

- fit a MultipleKernelRidgeCV to learn the kernel weights hyper-parameter,
- save the hyper-parameters, but not the ridge weights to save disk space,
- fit a WeightedKernelRidge from the saved hyper-parameters, for further use of
  the model (prediction, interpretation, etc.).

.. GENERATED FROM PYTHON SOURCE LINES 24-36

.. code-block:: default

    import numpy as np

    from himalaya.backend import set_backend
    from himalaya.kernel_ridge import WeightedKernelRidge
    from himalaya.kernel_ridge import Kernelizer
    from himalaya.kernel_ridge import ColumnKernelizer
    from himalaya.utils import generate_multikernel_dataset

    from sklearn.pipeline import make_pipeline
    from sklearn import set_config
    set_config(display='diagram')








.. GENERATED FROM PYTHON SOURCE LINES 37-38

In this example, we use the ``torch_cuda`` backend (GPU).

.. GENERATED FROM PYTHON SOURCE LINES 38-41

.. code-block:: default


    backend = set_backend("torch_cuda", on_error="warn")








.. GENERATED FROM PYTHON SOURCE LINES 42-48

Generate a random dataset
-------------------------
- X_train : array of shape (n_samples_train, n_features)
- X_test : array of shape (n_samples_test, n_features)
- Y_train : array of shape (n_samples_train, n_targets)
- Y_test : array of shape (n_samples_test, n_targets)

.. GENERATED FROM PYTHON SOURCE LINES 48-55

.. code-block:: default


    (X_train, X_test, Y_train, Y_test, kernel_weights,
     n_features_list) = generate_multikernel_dataset(n_kernels=4, n_targets=500,
                                                     n_samples_train=1000,
                                                     n_samples_test=400,
                                                     random_state=42)








.. GENERATED FROM PYTHON SOURCE LINES 56-58

Prepare the pipeline
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 58-71

.. code-block:: default


    # Find the start and end of each feature space X in Xs
    start_and_end = np.concatenate([[0], np.cumsum(n_features_list)])
    slices = [
        slice(start, end)
        for start, end in zip(start_and_end[:-1], start_and_end[1:])
    ]

    # Create a different ``Kernelizer`` for each feature space.
    kernelizers = [("space %d" % ii, Kernelizer(), slice_)
                   for ii, slice_ in enumerate(slices)]
    column_kernelizer = ColumnKernelizer(kernelizers)








.. GENERATED FROM PYTHON SOURCE LINES 72-76

Define the weighted kernel ridge model
--------------------------------------
Here we use the ground truth kernel weights for each target (deltas), but it
can be typically used with deltas obtained from a MultipleKernelRidgeCV fit.

.. GENERATED FROM PYTHON SOURCE LINES 76-85

.. code-block:: default


    deltas = backend.log(backend.asarray(kernel_weights.T))

    model_1 = WeightedKernelRidge(alpha=1, deltas=deltas, kernels="precomputed")
    pipe_1 = make_pipeline(column_kernelizer, model_1)

    # Fit the model on all targets
    pipe_1.fit(X_train, Y_train)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 {color: black;background-color: white;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 pre{padding: 0;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-toggleable {background-color: white;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-item {z-index: 1;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-parallel-item:only-child::after {width: 0;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-9e0f45b8-d512-4187-a3a2-06977283a5d8 div.sk-text-repr-fallback {display: none;}</style><div id="sk-9e0f45b8-d512-4187-a3a2-06977283a5d8" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;space 1&#x27;, Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;space 2&#x27;, Kernelizer(),
                                                     slice(2000, 3000, None)),
                                                    (&#x27;space 3&#x27;, Kernelizer(),
                                                     slice(3000, 4000, None))])),
                    (&#x27;weightedkernelridge&#x27;,
                     WeightedKernelRidge(alpha=1,
                                         deltas=tensor([[ -2.3483,  -1.5064,  -2.1911,  ...,  -0.5428,  -1.9162,  -4.4647],
            [ -0.1063, -12.7539,  -1.0228,  ...,  -1.0741,  -0.7493, -11.5341],
            [ -5.2674,  -0.2560,  -2.3263,  ...,  -6.4705,  -5.0901,  -0.0359],
            [ -8.5610,  -5.4922,  -0.8417,  ...,  -2.5803,  -0.9836,  -3.7396]],
           device=&#x27;cuda:0&#x27;, dtype=torch.float64),
                                         kernels=&#x27;precomputed&#x27;))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="44362d67-d911-43f5-8835-52059b36cf35" type="checkbox" ><label for="44362d67-d911-43f5-8835-52059b36cf35" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;space 1&#x27;, Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;space 2&#x27;, Kernelizer(),
                                                     slice(2000, 3000, None)),
                                                    (&#x27;space 3&#x27;, Kernelizer(),
                                                     slice(3000, 4000, None))])),
                    (&#x27;weightedkernelridge&#x27;,
                     WeightedKernelRidge(alpha=1,
                                         deltas=tensor([[ -2.3483,  -1.5064,  -2.1911,  ...,  -0.5428,  -1.9162,  -4.4647],
            [ -0.1063, -12.7539,  -1.0228,  ...,  -1.0741,  -0.7493, -11.5341],
            [ -5.2674,  -0.2560,  -2.3263,  ...,  -6.4705,  -5.0901,  -0.0359],
            [ -8.5610,  -5.4922,  -0.8417,  ...,  -2.5803,  -0.9836,  -3.7396]],
           device=&#x27;cuda:0&#x27;, dtype=torch.float64),
                                         kernels=&#x27;precomputed&#x27;))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3baa2de7-a7e4-433c-9cfc-aed6df491478" type="checkbox" ><label for="3baa2de7-a7e4-433c-9cfc-aed6df491478" class="sk-toggleable__label sk-toggleable__label-arrow">columnkernelizer: ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(), slice(0, 1000, None)),
                                   (&#x27;space 1&#x27;, Kernelizer(),
                                    slice(1000, 2000, None)),
                                   (&#x27;space 2&#x27;, Kernelizer(),
                                    slice(2000, 3000, None)),
                                   (&#x27;space 3&#x27;, Kernelizer(),
                                    slice(3000, 4000, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1aa27ed1-20a9-43d4-be39-f3f7ed80a3b6" type="checkbox" ><label for="1aa27ed1-20a9-43d4-be39-f3f7ed80a3b6" class="sk-toggleable__label sk-toggleable__label-arrow">space 0</label><div class="sk-toggleable__content"><pre>slice(0, 1000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e686ddce-15d1-4f79-b996-e3c51934f5dd" type="checkbox" ><label for="e686ddce-15d1-4f79-b996-e3c51934f5dd" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="23bbf9dd-ef49-4e93-a5a0-b870b2711269" type="checkbox" ><label for="23bbf9dd-ef49-4e93-a5a0-b870b2711269" class="sk-toggleable__label sk-toggleable__label-arrow">space 1</label><div class="sk-toggleable__content"><pre>slice(1000, 2000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="1aa8ab80-4a5b-48dc-a72f-f7bd5d0dddef" type="checkbox" ><label for="1aa8ab80-4a5b-48dc-a72f-f7bd5d0dddef" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="df0b91dc-240e-405a-a2da-2ec8761e194f" type="checkbox" ><label for="df0b91dc-240e-405a-a2da-2ec8761e194f" class="sk-toggleable__label sk-toggleable__label-arrow">space 2</label><div class="sk-toggleable__content"><pre>slice(2000, 3000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="223f594e-94f1-46d5-82eb-17c5a411b2b1" type="checkbox" ><label for="223f594e-94f1-46d5-82eb-17c5a411b2b1" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d7ec4d0a-ec3a-4b51-8250-08fa76f6e91f" type="checkbox" ><label for="d7ec4d0a-ec3a-4b51-8250-08fa76f6e91f" class="sk-toggleable__label sk-toggleable__label-arrow">space 3</label><div class="sk-toggleable__content"><pre>slice(3000, 4000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="ef0bc588-4c9a-411e-98dc-e33973ea533d" type="checkbox" ><label for="ef0bc588-4c9a-411e-98dc-e33973ea533d" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6bb6ce3b-f3d9-4417-9f32-50db23cb7514" type="checkbox" ><label for="6bb6ce3b-f3d9-4417-9f32-50db23cb7514" class="sk-toggleable__label sk-toggleable__label-arrow">WeightedKernelRidge</label><div class="sk-toggleable__content"><pre>WeightedKernelRidge(alpha=1,
                        deltas=tensor([[ -2.3483,  -1.5064,  -2.1911,  ...,  -0.5428,  -1.9162,  -4.4647],
            [ -0.1063, -12.7539,  -1.0228,  ...,  -1.0741,  -0.7493, -11.5341],
            [ -5.2674,  -0.2560,  -2.3263,  ...,  -6.4705,  -5.0901,  -0.0359],
            [ -8.5610,  -5.4922,  -0.8417,  ...,  -2.5803,  -0.9836,  -3.7396]],
           device=&#x27;cuda:0&#x27;, dtype=torch.float64),
                        kernels=&#x27;precomputed&#x27;)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 86-87

compute test score

.. GENERATED FROM PYTHON SOURCE LINES 87-90

.. code-block:: default

    test_scores_1 = pipe_1.score(X_test, Y_test)
    test_scores_1 = backend.to_numpy(test_scores_1)








.. GENERATED FROM PYTHON SOURCE LINES 91-93

We can compare this model to a baseline model where the kernel weights are
all equal and not learnt.

.. GENERATED FROM PYTHON SOURCE LINES 93-100

.. code-block:: default


    model_2 = WeightedKernelRidge(alpha=1, deltas="zeros", kernels="precomputed")
    pipe_2 = make_pipeline(column_kernelizer, model_2)

    # Fit the model on all targets
    pipe_2.fit(X_train, Y_train)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 {color: black;background-color: white;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 pre{padding: 0;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-toggleable {background-color: white;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-estimator:hover {background-color: #d4ebff;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-item {z-index: 1;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-parallel-item:only-child::after {width: 0;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751 div.sk-text-repr-fallback {display: none;}</style><div id="sk-a43ccf14-5ac6-42a8-9c7d-7b2f629e2751" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;space 1&#x27;, Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;space 2&#x27;, Kernelizer(),
                                                     slice(2000, 3000, None)),
                                                    (&#x27;space 3&#x27;, Kernelizer(),
                                                     slice(3000, 4000, None))])),
                    (&#x27;weightedkernelridge&#x27;,
                     WeightedKernelRidge(alpha=1, kernels=&#x27;precomputed&#x27;))])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e3c8338d-a4fb-475c-836d-69c539481761" type="checkbox" ><label for="e3c8338d-a4fb-475c-836d-69c539481761" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;columnkernelizer&#x27;,
                     ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    (&#x27;space 1&#x27;, Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    (&#x27;space 2&#x27;, Kernelizer(),
                                                     slice(2000, 3000, None)),
                                                    (&#x27;space 3&#x27;, Kernelizer(),
                                                     slice(3000, 4000, None))])),
                    (&#x27;weightedkernelridge&#x27;,
                     WeightedKernelRidge(alpha=1, kernels=&#x27;precomputed&#x27;))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="0e6ccb2b-96be-42e5-9b47-a8ee2e3228e9" type="checkbox" ><label for="0e6ccb2b-96be-42e5-9b47-a8ee2e3228e9" class="sk-toggleable__label sk-toggleable__label-arrow">columnkernelizer: ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[(&#x27;space 0&#x27;, Kernelizer(), slice(0, 1000, None)),
                                   (&#x27;space 1&#x27;, Kernelizer(),
                                    slice(1000, 2000, None)),
                                   (&#x27;space 2&#x27;, Kernelizer(),
                                    slice(2000, 3000, None)),
                                   (&#x27;space 3&#x27;, Kernelizer(),
                                    slice(3000, 4000, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f02ca757-9428-472d-ae49-245d0986e8b7" type="checkbox" ><label for="f02ca757-9428-472d-ae49-245d0986e8b7" class="sk-toggleable__label sk-toggleable__label-arrow">space 0</label><div class="sk-toggleable__content"><pre>slice(0, 1000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f7604ff9-35c4-4bec-acc9-f646c5daa64a" type="checkbox" ><label for="f7604ff9-35c4-4bec-acc9-f646c5daa64a" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="574a4d2a-7139-4546-ab58-81c3c5d867a7" type="checkbox" ><label for="574a4d2a-7139-4546-ab58-81c3c5d867a7" class="sk-toggleable__label sk-toggleable__label-arrow">space 1</label><div class="sk-toggleable__content"><pre>slice(1000, 2000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="a7d38f2e-0800-4ac1-a8a3-20018ad6317a" type="checkbox" ><label for="a7d38f2e-0800-4ac1-a8a3-20018ad6317a" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="5678f87f-781e-4236-bf7a-cb401d4744f9" type="checkbox" ><label for="5678f87f-781e-4236-bf7a-cb401d4744f9" class="sk-toggleable__label sk-toggleable__label-arrow">space 2</label><div class="sk-toggleable__content"><pre>slice(2000, 3000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="03e0c8ca-28b1-4fa0-bf71-a1f6b31b9a93" type="checkbox" ><label for="03e0c8ca-28b1-4fa0-bf71-a1f6b31b9a93" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="268b9598-27a8-49e3-a169-449f89a8eb22" type="checkbox" ><label for="268b9598-27a8-49e3-a169-449f89a8eb22" class="sk-toggleable__label sk-toggleable__label-arrow">space 3</label><div class="sk-toggleable__content"><pre>slice(3000, 4000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="96ae24f0-d6f3-48ab-be5a-fa94376e915d" type="checkbox" ><label for="96ae24f0-d6f3-48ab-be5a-fa94376e915d" class="sk-toggleable__label sk-toggleable__label-arrow">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="58001744-268a-4a30-844a-d748fb81f871" type="checkbox" ><label for="58001744-268a-4a30-844a-d748fb81f871" class="sk-toggleable__label sk-toggleable__label-arrow">WeightedKernelRidge</label><div class="sk-toggleable__content"><pre>WeightedKernelRidge(alpha=1, kernels=&#x27;precomputed&#x27;)</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 101-102

compute test score

.. GENERATED FROM PYTHON SOURCE LINES 102-105

.. code-block:: default

    test_scores_2 = pipe_2.score(X_test, Y_test)
    test_scores_2 = backend.to_numpy(test_scores_2)








.. GENERATED FROM PYTHON SOURCE LINES 106-108

Compare the predictions on a test set
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 108-120

.. code-block:: default

    import matplotlib.pyplot as plt

    plt.figure(figsize=(4, 3))
    plt.hist(test_scores_2, np.linspace(0, 1, 30), alpha=0.7,
             label="Default deltas")
    plt.hist(test_scores_1, np.linspace(0, 1, 30), alpha=0.7,
             label="Ground truth deltas")
    plt.xlabel("$R^2$ generalization score")
    plt.ylabel("Number of voxels")
    plt.legend()
    plt.tight_layout()
    plt.show()



.. image:: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_4_refit_from_deltas_001.png
    :alt: plot mkr 4 refit from deltas
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.393 seconds)


.. _sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_4_refit_from_deltas.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mkr_4_refit_from_deltas.py <plot_mkr_4_refit_from_deltas.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mkr_4_refit_from_deltas.ipynb <plot_mkr_4_refit_from_deltas.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
