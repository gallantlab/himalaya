
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/multiple_kernel_ridge/plot_mkr_4_refit_from_deltas.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_4_refit_from_deltas.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_multiple_kernel_ridge_plot_mkr_4_refit_from_deltas.py:


Multiple-kernel ridge fit from fixed hyper-parameters
=====================================================
This example demonstrates how to fit a multiple-kernel ridge model with fixed
hyper-parameters. Here are three different usecases:
- If the kernel weights hyper-parameters are known and identical across
  targets, the kernels can be scaled and summed, and a simple KernelRidgeCV can
  be used to fit the model.
- If the kernel weights hyper-parameters are unknown and different across
  targets, a MultipleKernelRidgeCV can be use to search the best
  hyper-parameters per target.
- If the kernel weights hyper-parameters are known and different across
  targets, a WeightedKernelRidge model can be used to fit the ridge models on
  each target independently.

This method can be used for example in the following workflow:
- fit a MultipleKernelRidgeCV to learn the kernel weights hyper-parameter,
- save the hyper-parameters, but not the ridge weights to save disk space,
- fit a WeightedKernelRidge from the saved hyper-parameters, for further use of
  the model (prediction, interpretation, etc.).

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default

    import numpy as np

    from himalaya.backend import set_backend
    from himalaya.kernel_ridge import WeightedKernelRidge
    from himalaya.kernel_ridge import Kernelizer
    from himalaya.kernel_ridge import ColumnKernelizer
    from himalaya.utils import generate_multikernel_dataset

    from sklearn.pipeline import make_pipeline








.. GENERATED FROM PYTHON SOURCE LINES 33-34

In this example, we use the ``torch_cuda`` backend (GPU).

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: default


    backend = set_backend("torch_cuda", on_error="warn")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/himalaya/himalaya/himalaya/backend/_utils.py:56: UserWarning: Setting backend to torch_cuda failed: PyTorch with CUDA is not available..Falling back to numpy backend.
      warnings.warn(f"Setting backend to {backend} failed: {str(error)}."




.. GENERATED FROM PYTHON SOURCE LINES 38-39

We can display the ``scikit-learn`` pipeline with an HTML diagram.

.. GENERATED FROM PYTHON SOURCE LINES 39-42

.. code-block:: default

    from sklearn import set_config
    set_config(display='diagram')  # requires scikit-learn 0.23








.. GENERATED FROM PYTHON SOURCE LINES 43-49

Generate a random dataset
-------------------------
- X_train : array of shape (n_samples_train, n_features)
- X_test : array of shape (n_samples_test, n_features)
- Y_train : array of shape (n_samples_train, n_targets)
- Y_test : array of shape (n_samples_test, n_targets)

.. GENERATED FROM PYTHON SOURCE LINES 49-56

.. code-block:: default


    (X_train, X_test, Y_train, Y_test, kernel_weights,
     n_features_list) = generate_multikernel_dataset(n_kernels=4, n_targets=500,
                                                     n_samples_train=1000,
                                                     n_samples_test=400,
                                                     random_state=42)








.. GENERATED FROM PYTHON SOURCE LINES 57-59

Prepare the pipeline
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 59-72

.. code-block:: default


    # Find the start and end of each feature space X in Xs
    start_and_end = np.concatenate([[0], np.cumsum(n_features_list)])
    slices = [
        slice(start, end)
        for start, end in zip(start_and_end[:-1], start_and_end[1:])
    ]

    # Create a different ``Kernelizer`` for each feature space.
    kernelizers = [("space %d" % ii, Kernelizer(), slice_)
                   for ii, slice_ in enumerate(slices)]
    column_kernelizer = ColumnKernelizer(kernelizers)








.. GENERATED FROM PYTHON SOURCE LINES 73-77

Define the weighted kernel ridge model
--------------------------------------
Here we use the ground truth kernel weights for each target (deltas), but it
can be typically used with deltas obtained from a MultipleKernelRidgeCV fit.

.. GENERATED FROM PYTHON SOURCE LINES 77-90

.. code-block:: default


    deltas = backend.log(backend.asarray(kernel_weights.T))

    model_1 = WeightedKernelRidge(alpha=1, deltas=deltas, kernels="precomputed")
    pipe_1 = make_pipeline(column_kernelizer, model_1)

    # Fit the model on all targets
    pipe_1.fit(X_train, Y_train)

    # compute test score
    test_scores_1 = pipe_1.score(X_test, Y_test)
    test_scores_1 = backend.to_numpy(test_scores_1)








.. GENERATED FROM PYTHON SOURCE LINES 91-93

We can compare this model to a baseline model where the kernel weights are
all equal and not learnt.

.. GENERATED FROM PYTHON SOURCE LINES 93-104

.. code-block:: default


    model_2 = WeightedKernelRidge(alpha=1, deltas="zeros", kernels="precomputed")
    pipe_2 = make_pipeline(column_kernelizer, model_2)

    # Fit the model on all targets
    pipe_2.fit(X_train, Y_train)

    # compute test score
    test_scores_2 = pipe_2.score(X_test, Y_test)
    test_scores_2 = backend.to_numpy(test_scores_2)








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Compare the predictions on a test set
-------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 107-119

.. code-block:: default

    import matplotlib.pyplot as plt

    plt.figure(figsize=(4, 3))
    plt.hist(test_scores_2, np.linspace(0, 1, 30), alpha=0.7,
             label="Default deltas")
    plt.hist(test_scores_1, np.linspace(0, 1, 30), alpha=0.7,
             label="Ground truth deltas")
    plt.xlabel("$R^2$ generalization score")
    plt.ylabel("Number of voxels")
    plt.legend()
    plt.tight_layout()
    plt.show()



.. image-sg:: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_4_refit_from_deltas_001.png
   :alt: plot mkr 4 refit from deltas
   :srcset: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_4_refit_from_deltas_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.042 seconds)


.. _sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_4_refit_from_deltas.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mkr_4_refit_from_deltas.py <plot_mkr_4_refit_from_deltas.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mkr_4_refit_from_deltas.ipynb <plot_mkr_4_refit_from_deltas.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
