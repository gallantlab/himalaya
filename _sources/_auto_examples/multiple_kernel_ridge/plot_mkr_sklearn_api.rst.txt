
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_auto_examples/multiple_kernel_ridge/plot_mkr_sklearn_api.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_sklearn_api.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__auto_examples_multiple_kernel_ridge_plot_mkr_sklearn_api.py:


Multiple kernel ridge with scikit-learn API
===========================================
This example demonstrates how to solve multiple kernel ridge regression, using
scikit-learn API.

.. GENERATED FROM PYTHON SOURCE LINES 7-19

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt

    from himalaya.backend import set_backend
    from himalaya.kernel_ridge import KernelRidgeCV
    from himalaya.kernel_ridge import MultipleKernelRidgeCV
    from himalaya.kernel_ridge import Kernelizer
    from himalaya.kernel_ridge import ColumnKernelizer

    from sklearn.pipeline import make_pipeline








.. GENERATED FROM PYTHON SOURCE LINES 21-28

In this example, we use the ``torch`` backend.

Torch can perform computations both on CPU and GPU.
To use the CPU, use the "torch" backend.
To use GPU, you can either use the "torch" backend and move your data to GPU
with the ``.cuda`` method, or you can use the "torch_cuda" backend which calls
this method in ``backend.asarray``.

.. GENERATED FROM PYTHON SOURCE LINES 28-31

.. code-block:: default


    backend = set_backend("torch_cuda")








.. GENERATED FROM PYTHON SOURCE LINES 32-38

Generate a random dataset
-------------------------
- Xs_train : list of arrays of shape (n_samples_train, n_features)
- Xs_test : list of arrays of shape (n_samples_test, n_features)
- Y_train : array of shape (n_samples_train, n_targets)
- Y_test : array of shape (n_repeat, n_samples_test, n_targets)

.. GENERATED FROM PYTHON SOURCE LINES 38-59

.. code-block:: default


    n_samples_train = 1000
    n_samples_test = 300
    n_targets = 1000
    n_features_list = [1000, 1000, 500]
    feature_names = ["feature space A", "feature space B", "feature space C"]

    Xs_train = [
        backend.randn(n_samples_train, n_features)
        for n_features in n_features_list
    ]
    Xs_test = [
        backend.randn(n_samples_test, n_features) for n_features in n_features_list
    ]
    ws = [
        backend.randn(n_features, n_targets) / n_features
        for n_features in n_features_list
    ]
    Y_train = backend.stack([X @ w for X, w in zip(Xs_train, ws)]).sum(0)
    Y_test = backend.stack([X @ w for X, w in zip(Xs_test, ws)]).sum(0)








.. GENERATED FROM PYTHON SOURCE LINES 60-61

Optional: Add some arbitrary scalings per kernel

.. GENERATED FROM PYTHON SOURCE LINES 61-66

.. code-block:: default

    if True:
        scalings = [0.2, 5, 1]
        Xs_train = [X * scaling for X, scaling in zip(Xs_train, scalings)]
        Xs_test = [X * scaling for X, scaling in zip(Xs_test, scalings)]








.. GENERATED FROM PYTHON SOURCE LINES 67-68

Concatenate the feature spaces and move to GPU with ``backend.asarray``.

.. GENERATED FROM PYTHON SOURCE LINES 68-71

.. code-block:: default

    X_train = backend.asarray(backend.concatenate(Xs_train, 1), dtype="float32")
    X_test = backend.asarray(backend.concatenate(Xs_test, 1), dtype="float32")








.. GENERATED FROM PYTHON SOURCE LINES 72-75

We could precompute the kernels by hand on ``Xs_train``, as done in
``plot_mkr_random_search.py``. Instead, here we use the
``ColumnKernelizer`` to make a ``scikit-learn`` ``Pipeline``.

.. GENERATED FROM PYTHON SOURCE LINES 75-83

.. code-block:: default


    # Find the start and end of each feature space X in Xs
    start_and_end = np.concatenate([[0], np.cumsum(n_features_list)])
    slices = [
        slice(start, end)
        for start, end in zip(start_and_end[:-1], start_and_end[1:])
    ]








.. GENERATED FROM PYTHON SOURCE LINES 84-88

Create a different ``Kernelizer`` for each feature space. Here we use a
linear kernel for all feature spaces, but ``ColumnKernelizer`` accepts any
``Kernelizer``, or ``scikit-learn`` ``Pipeline`` ending with a
``Kernelizer``.

.. GENERATED FROM PYTHON SOURCE LINES 88-95

.. code-block:: default

    kernelizers = [(name, Kernelizer(), slice_)
                   for name, slice_ in zip(feature_names, slices)]
    column_kernelizer = ColumnKernelizer(kernelizers)

    # Note that ``ColumnKernelizer`` has a parameter ``n_jobs`` to parallelize each
    # kernelizer, yet such parallelism does not work with GPU arrays.








.. GENERATED FROM PYTHON SOURCE LINES 96-102

Define the model
----------------

The class takes a number of common parameters during initialization, such as
`kernels` or `solver`. Since the solver parameters might be different
depending on the solver, they can be passed in the `solver_params` parameter.

.. GENERATED FROM PYTHON SOURCE LINES 104-106

Here we use the "random_search" solver.
We can check its specific parameters in the function docstring:

.. GENERATED FROM PYTHON SOURCE LINES 106-110

.. code-block:: default

    solver_function = MultipleKernelRidgeCV.ALL_SOLVERS["random_search"]
    print("Docstring of the function %s:" % solver_function.__name__)
    print(solver_function.__doc__)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Docstring of the function solve_multiple_kernel_ridge_random_search:
    Solve multiple kernel ridge regression using random search.

        Parameters
        ----------
        Ks : array of shape (n_kernels, n_samples, n_samples)
            Input kernels.
        Y : array of shape (n_samples, n_targets)
            Target data.
        n_iter : int, or array of shape (n_iter, n_kernels)
            Number of kernel weights combination to search.
            If an array is given, the solver uses it as the list of kernel weights
            to try, instead of sampling from a Dirichlet distribution.
        concentration : float, or list of float
            Concentration parameters of the Dirichlet distribution.
            If a list, iteratively cycle through the list.
            Not used if n_iter is an array.
        alphas : float or array of shape (n_alphas, )
            Range of ridge regularization parameter.
        score_func : callable
            Function used to compute the score of predictions versus Y.
        cv : int or scikit-learn splitter
            Cross-validation splitter. If an int, KFold is used.
        fit_intercept : boolean
            Whether to fit an intercept. If False, Ks should be centered
            (see KernelCenterer), and Y must be zero-mean over samples.
            Only available if return_weights == 'dual'.
        return_weights : None, 'primal', or 'dual'
            Whether to refit on the entire dataset and return the weights.
        Xs : array of shape (n_kernels, n_samples, n_features) or None
            Necessary if return_weights == 'primal'.
        local_alpha : bool
            If True, alphas are selected per target, else shared over all targets.
        jitter_alphas : bool
            If True, alphas range is slightly jittered for each gamma.
        random_state : int, or None
            Random generator seed. Use an int for deterministic search.
        n_targets_batch : int or None
            Size of the batch for over targets during cross-validation.
            Used for memory reasons. If None, uses all n_targets at once.
        n_targets_batch_refit : int or None
            Size of the batch for over targets during refit.
            Used for memory reasons. If None, uses all n_targets at once.
        n_alphas_batch : int or None
            Size of the batch for over alphas. Used for memory reasons.
            If None, uses all n_alphas at once.
        progress_bar : bool
            If True, display a progress bar over gammas.
        Ks_in_cpu : bool
            If True, keep Ks in CPU memory to limit GPU memory (slower).
            This feature is not available through the scikit-learn API.
        conservative : bool
            If True, when selecting the hyperparameter alpha, take the largest one
            that is less than one standard deviation away from the best.
            If False, take the best.
        Y_in_cpu : bool
            If True, keep the target values ``Y`` in CPU memory (slower).
        diagonalize_method : str in {"eigh", "svd"}
            Method used to diagonalize the kernel.
        return_alphas : bool
            If True, return the best alpha value for each target.

        Returns
        -------
        deltas : array of shape (n_kernels, n_targets)
            Best log kernel weights for each target.
        refit_weights : array or None
            Refit regression weights on the entire dataset, using selected best
            hyperparameters. Refit weights are always stored on CPU memory.
            If return_weights == 'primal', shape is (n_features, n_targets),
            if return_weights == 'dual', shape is (n_samples, n_targets),
            else, None.
        cv_scores : array of shape (n_iter, n_targets)
            Cross-validation scores per iteration, averaged over splits, for the
            best alpha. Cross-validation scores will always be on CPU memory.
        best_alphas : array of shape (n_targets, )
            Best alpha value per target. Only returned if return_alphas is True.
        intercept : array of shape (n_targets,)
            Intercept. Only returned when fit_intercept is True.
    




.. GENERATED FROM PYTHON SOURCE LINES 111-114

We use 100 iterations to have a reasonably fast example (~40 sec).
To have a better convergence, we probably need more iterations.
Note that there is currently no stopping criterion in this method.

.. GENERATED FROM PYTHON SOURCE LINES 114-116

.. code-block:: default

    n_iter = 100








.. GENERATED FROM PYTHON SOURCE LINES 117-118

Grid of regularization parameters.

.. GENERATED FROM PYTHON SOURCE LINES 118-120

.. code-block:: default

    alphas = np.logspace(-10, 10, 41)








.. GENERATED FROM PYTHON SOURCE LINES 121-124

Batch parameters are used to reduce the necessary GPU memory. A larger value
will be a bit faster, but the solver might crash if it runs out of memory.
Optimal values depend on the size of your dataset.

.. GENERATED FROM PYTHON SOURCE LINES 124-137

.. code-block:: default

    n_targets_batch = 1000
    n_alphas_batch = 20
    n_targets_batch_refit = 200

    solver_params = dict(n_iter=n_iter, alphas=alphas,
                         n_targets_batch=n_targets_batch,
                         n_alphas_batch=n_alphas_batch,
                         n_targets_batch_refit=n_targets_batch_refit,
                         jitter_alphas=True)

    model = MultipleKernelRidgeCV(kernels="precomputed", solver="random_search",
                                  solver_params=solver_params)








.. GENERATED FROM PYTHON SOURCE LINES 138-139

Define and fit the pipeline

.. GENERATED FROM PYTHON SOURCE LINES 139-142

.. code-block:: default

    pipe = make_pipeline(column_kernelizer, model)
    pipe.fit(X_train, Y_train)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [                                        ] 0% | 0.00 sec | 100 random sampling with cv |     [                                        ] 1% | 0.33 sec | 100 random sampling with cv |     [                                        ] 2% | 0.63 sec | 100 random sampling with cv |     [.                                       ] 3% | 0.86 sec | 100 random sampling with cv |     [.                                       ] 4% | 1.14 sec | 100 random sampling with cv |     [..                                      ] 5% | 1.43 sec | 100 random sampling with cv |     [..                                      ] 6% | 1.66 sec | 100 random sampling with cv |     [..                                      ] 7% | 1.88 sec | 100 random sampling with cv |     [...                                     ] 8% | 2.18 sec | 100 random sampling with cv |     [...                                     ] 9% | 2.41 sec | 100 random sampling with cv |     [....                                    ] 10% | 2.64 sec | 100 random sampling with cv |     [....                                    ] 11% | 2.86 sec | 100 random sampling with cv |     [....                                    ] 12% | 3.09 sec | 100 random sampling with cv |     [.....                                   ] 13% | 3.31 sec | 100 random sampling with cv |     [.....                                   ] 14% | 3.54 sec | 100 random sampling with cv |     [......                                  ] 15% | 3.76 sec | 100 random sampling with cv |     [......                                  ] 16% | 3.99 sec | 100 random sampling with cv |     [......                                  ] 17% | 4.21 sec | 100 random sampling with cv |     [.......                                 ] 18% | 4.44 sec | 100 random sampling with cv |     [.......                                 ] 19% | 4.67 sec | 100 random sampling with cv |     [........                                ] 20% | 4.89 sec | 100 random sampling with cv |     [........                                ] 21% | 5.11 sec | 100 random sampling with cv |     [........                                ] 22% | 5.34 sec | 100 random sampling with cv |     [.........                               ] 23% | 5.56 sec | 100 random sampling with cv |     [.........                               ] 24% | 5.79 sec | 100 random sampling with cv |     [..........                              ] 25% | 6.02 sec | 100 random sampling with cv |     [..........                              ] 26% | 6.24 sec | 100 random sampling with cv |     [..........                              ] 27% | 6.47 sec | 100 random sampling with cv |     [...........                             ] 28% | 6.70 sec | 100 random sampling with cv |     [...........                             ] 29% | 6.92 sec | 100 random sampling with cv |     [............                            ] 30% | 7.15 sec | 100 random sampling with cv |     [............                            ] 31% | 7.37 sec | 100 random sampling with cv |     [............                            ] 32% | 7.60 sec | 100 random sampling with cv |     [.............                           ] 33% | 7.83 sec | 100 random sampling with cv |     [.............                           ] 34% | 8.05 sec | 100 random sampling with cv |     [..............                          ] 35% | 8.28 sec | 100 random sampling with cv |     [..............                          ] 36% | 8.50 sec | 100 random sampling with cv |     [..............                          ] 37% | 8.73 sec | 100 random sampling with cv |     [...............                         ] 38% | 8.96 sec | 100 random sampling with cv |     [...............                         ] 39% | 9.18 sec | 100 random sampling with cv |     [................                        ] 40% | 9.41 sec | 100 random sampling with cv |     [................                        ] 41% | 9.64 sec | 100 random sampling with cv |     [................                        ] 42% | 9.86 sec | 100 random sampling with cv |     [.................                       ] 43% | 10.06 sec | 100 random sampling with cv |     [.................                       ] 44% | 10.29 sec | 100 random sampling with cv |     [..................                      ] 45% | 10.52 sec | 100 random sampling with cv |     [..................                      ] 46% | 10.75 sec | 100 random sampling with cv |     [..................                      ] 47% | 10.97 sec | 100 random sampling with cv |     [...................                     ] 48% | 11.19 sec | 100 random sampling with cv |     [...................                     ] 49% | 11.42 sec | 100 random sampling with cv |     [....................                    ] 50% | 11.64 sec | 100 random sampling with cv |     [....................                    ] 51% | 11.87 sec | 100 random sampling with cv |     [....................                    ] 52% | 12.10 sec | 100 random sampling with cv |     [.....................                   ] 53% | 12.32 sec | 100 random sampling with cv |     [.....................                   ] 54% | 12.55 sec | 100 random sampling with cv |     [......................                  ] 55% | 12.78 sec | 100 random sampling with cv |     [......................                  ] 56% | 13.00 sec | 100 random sampling with cv |     [......................                  ] 57% | 13.23 sec | 100 random sampling with cv |     [.......................                 ] 58% | 13.46 sec | 100 random sampling with cv |     [.......................                 ] 59% | 13.67 sec | 100 random sampling with cv |     [........................                ] 60% | 13.90 sec | 100 random sampling with cv |     [........................                ] 61% | 14.12 sec | 100 random sampling with cv |     [........................                ] 62% | 14.35 sec | 100 random sampling with cv |     [.........................               ] 63% | 14.57 sec | 100 random sampling with cv |     [.........................               ] 64% | 14.80 sec | 100 random sampling with cv |     [..........................              ] 65% | 15.03 sec | 100 random sampling with cv |     [..........................              ] 66% | 15.26 sec | 100 random sampling with cv |     [..........................              ] 67% | 15.48 sec | 100 random sampling with cv |     [...........................             ] 68% | 15.71 sec | 100 random sampling with cv |     [...........................             ] 69% | 15.94 sec | 100 random sampling with cv |     [............................            ] 70% | 16.16 sec | 100 random sampling with cv |     [............................            ] 71% | 16.39 sec | 100 random sampling with cv |     [............................            ] 72% | 16.62 sec | 100 random sampling with cv |     [.............................           ] 73% | 16.84 sec | 100 random sampling with cv |     [.............................           ] 74% | 17.07 sec | 100 random sampling with cv |     [..............................          ] 75% | 17.30 sec | 100 random sampling with cv |     [..............................          ] 76% | 17.53 sec | 100 random sampling with cv |     [..............................          ] 77% | 17.76 sec | 100 random sampling with cv |     [...............................         ] 78% | 17.98 sec | 100 random sampling with cv |     [...............................         ] 79% | 18.21 sec | 100 random sampling with cv |     [................................        ] 80% | 18.44 sec | 100 random sampling with cv |     [................................        ] 81% | 18.67 sec | 100 random sampling with cv |     [................................        ] 82% | 18.89 sec | 100 random sampling with cv |     [.................................       ] 83% | 19.12 sec | 100 random sampling with cv |     [.................................       ] 84% | 19.35 sec | 100 random sampling with cv |     [..................................      ] 85% | 19.57 sec | 100 random sampling with cv |     [..................................      ] 86% | 19.80 sec | 100 random sampling with cv |     [..................................      ] 87% | 20.03 sec | 100 random sampling with cv |     [...................................     ] 88% | 20.26 sec | 100 random sampling with cv |     [...................................     ] 89% | 20.48 sec | 100 random sampling with cv |     [....................................    ] 90% | 20.71 sec | 100 random sampling with cv |     [....................................    ] 91% | 20.94 sec | 100 random sampling with cv |     [....................................    ] 92% | 21.16 sec | 100 random sampling with cv |     [.....................................   ] 93% | 21.39 sec | 100 random sampling with cv |     [.....................................   ] 94% | 21.62 sec | 100 random sampling with cv |     [......................................  ] 95% | 21.85 sec | 100 random sampling with cv |     [......................................  ] 96% | 22.07 sec | 100 random sampling with cv |     [......................................  ] 97% | 22.36 sec | 100 random sampling with cv |     [....................................... ] 98% | 22.58 sec | 100 random sampling with cv |     [....................................... ] 99% | 22.81 sec | 100 random sampling with cv |     [........................................] 100% | 23.04 sec | 100 random sampling with cv | 


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 {color: black;background-color: white;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 pre{padding: 0;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-toggleable {background-color: white;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-estimator:hover {background-color: #d4ebff;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-item {z-index: 1;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-parallel-item:only-child::after {width: 0;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-05981772-a6e0-4b6e-a9be-f382c0cc5317 div.sk-container {display: inline-block;position: relative;}</style><div id="sk-05981772-a6e0-4b6e-a9be-f382c0cc5317" class"sk-top-container"><div class="sk-container"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="d8026876-6a25-417b-8cae-86f7ad3cccc9" type="checkbox" ><label class="sk-toggleable__label" for="d8026876-6a25-417b-8cae-86f7ad3cccc9">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[('columnkernelizer',
                     ColumnKernelizer(transformers=[('feature space A',
                                                     Kernelizer(),
                                                     slice(0, 1000, None)),
                                                    ('feature space B',
                                                     Kernelizer(),
                                                     slice(1000, 2000, None)),
                                                    ('feature space C',
                                                     Kernelizer(),
                                                     slice(2000, 2500, None))])),
                    ('multiplekernelridgecv',
                     MultipleKernelRidgeCV(kernels='precomputed',
                                           solver_params={'alphas': array([1.00000000e-10, 3.1622776...
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]),
                                                          'jitter_alphas': True,
                                                          'n_alphas_batch': 20,
                                                          'n_iter': 100,
                                                          'n_targets_batch': 1000,
                                                          'n_targets_batch_refit': 200}))])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6c248357-4a72-455c-b485-90294d4147ef" type="checkbox" ><label class="sk-toggleable__label" for="6c248357-4a72-455c-b485-90294d4147ef">columnkernelizer: ColumnKernelizer</label><div class="sk-toggleable__content"><pre>ColumnKernelizer(transformers=[('feature space A', Kernelizer(),
                                    slice(0, 1000, None)),
                                   ('feature space B', Kernelizer(),
                                    slice(1000, 2000, None)),
                                   ('feature space C', Kernelizer(),
                                    slice(2000, 2500, None))])</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="3394ab70-4d54-446f-b4b5-6a32af2fcaae" type="checkbox" ><label class="sk-toggleable__label" for="3394ab70-4d54-446f-b4b5-6a32af2fcaae">feature space A</label><div class="sk-toggleable__content"><pre>slice(0, 1000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="2386e54a-f4aa-4064-bd4c-0f582412d7f4" type="checkbox" ><label class="sk-toggleable__label" for="2386e54a-f4aa-4064-bd4c-0f582412d7f4">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="caec6043-3d11-4f3a-888d-8849e7d47b7c" type="checkbox" ><label class="sk-toggleable__label" for="caec6043-3d11-4f3a-888d-8849e7d47b7c">feature space B</label><div class="sk-toggleable__content"><pre>slice(1000, 2000, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="e5c290db-788a-4b49-a66e-29bea7b50e05" type="checkbox" ><label class="sk-toggleable__label" for="e5c290db-788a-4b49-a66e-29bea7b50e05">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="f3c1ebcc-fc85-4a01-8dfe-ff733edfc0d2" type="checkbox" ><label class="sk-toggleable__label" for="f3c1ebcc-fc85-4a01-8dfe-ff733edfc0d2">feature space C</label><div class="sk-toggleable__content"><pre>slice(2000, 2500, None)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="6cfd7d11-a1a8-427f-a48f-d8a0c810fe05" type="checkbox" ><label class="sk-toggleable__label" for="6cfd7d11-a1a8-427f-a48f-d8a0c810fe05">Kernelizer</label><div class="sk-toggleable__content"><pre>Kernelizer()</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="fb098517-aae2-46f2-a392-1a09a3ab437b" type="checkbox" ><label class="sk-toggleable__label" for="fb098517-aae2-46f2-a392-1a09a3ab437b">MultipleKernelRidgeCV</label><div class="sk-toggleable__content"><pre>MultipleKernelRidgeCV(kernels='precomputed',
                          solver_params={'alphas': array([1.00000000e-10, 3.16227766e-10, 1.00000000e-09, 3.16227766e-09,
           1.00000000e-08, 3.16227766e-08, 1.00000000e-07, 3.16227766e-07,
           1.00000000e-06, 3.16227766e-06, 1.00000000e-05, 3.16227766e-05,
           1.00000000e-04, 3.16227766e-04, 1.00000000e-03, 3.16227766e-03,
           1.00000000e-02, 3.16227766e-02, 1.000...
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]),
                                         'jitter_alphas': True,
                                         'n_alphas_batch': 20, 'n_iter': 100,
                                         'n_targets_batch': 1000,
                                         'n_targets_batch_refit': 200})</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 143-145

Plot the convergence curve
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 145-161

.. code-block:: default


    # ``cv_scores`` gives the scores for each sampled kernel weights.
    # The convergence curve is thus the current maximum for each target.
    cv_scores = backend.to_numpy(pipe[1].cv_scores_)
    current_max = np.maximum.accumulate(cv_scores, axis=0)
    mean_current_max = np.mean(current_max, axis=1)

    x_array = np.arange(1, len(mean_current_max) + 1)
    plt.plot(x_array, mean_current_max, '-o')
    plt.grid("on")
    plt.xlabel("Number of kernel weights sampled")
    plt.ylabel("L2 negative loss (higher is better)")
    plt.title("Convergence curve, averaged over targets")
    plt.tight_layout()
    plt.show()




.. image:: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_sklearn_api_001.png
    :alt: Convergence curve, averaged over targets
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 162-166

Compare to ``KernelRidgeCV``
----------------------------
Compare to a baseline ``KernelRidgeCV`` model with all the concatenated features.
Comparison is performed using the prediction scores on the test set.

.. GENERATED FROM PYTHON SOURCE LINES 169-170

Fit the baseline model ``KernelRidgeCV``

.. GENERATED FROM PYTHON SOURCE LINES 170-173

.. code-block:: default

    baseline = KernelRidgeCV(kernel="linear", alphas=alphas)
    baseline.fit(X_train, Y_train)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c {color: black;background-color: white;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c pre{padding: 0;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-toggleable {background-color: white;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-estimator:hover {background-color: #d4ebff;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-item {z-index: 1;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-parallel::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-parallel-item:only-child::after {width: 0;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-31f82b34-3b90-4fb3-af70-ac63e285c74c div.sk-container {display: inline-block;position: relative;}</style><div id="sk-31f82b34-3b90-4fb3-af70-ac63e285c74c" class"sk-top-container"><div class="sk-container"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="9b365b06-2806-4760-82c9-c57b287690ce" type="checkbox" checked><label class="sk-toggleable__label" for="9b365b06-2806-4760-82c9-c57b287690ce">KernelRidgeCV</label><div class="sk-toggleable__content"><pre>KernelRidgeCV(alphas=array([1.00000000e-10, 3.16227766e-10, 1.00000000e-09, 3.16227766e-09,
           1.00000000e-08, 3.16227766e-08, 1.00000000e-07, 3.16227766e-07,
           1.00000000e-06, 3.16227766e-06, 1.00000000e-05, 3.16227766e-05,
           1.00000000e-04, 3.16227766e-04, 1.00000000e-03, 3.16227766e-03,
           1.00000000e-02, 3.16227766e-02, 1.00000000e-01, 3.16227766e-01,
           1.00000000e+00, 3.16227766e+00, 1.00000000e+01, 3.16227766e+01,
           1.00000000e+02, 3.16227766e+02, 1.00000000e+03, 3.16227766e+03,
           1.00000000e+04, 3.16227766e+04, 1.00000000e+05, 3.16227766e+05,
           1.00000000e+06, 3.16227766e+06, 1.00000000e+07, 3.16227766e+07,
           1.00000000e+08, 3.16227766e+08, 1.00000000e+09, 3.16227766e+09,
           1.00000000e+10]))</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 174-175

Compute scores of both models

.. GENERATED FROM PYTHON SOURCE LINES 175-181

.. code-block:: default

    scores = pipe.score(X_test, Y_test)
    scores = backend.to_numpy(scores)

    scores_baseline = baseline.score(X_test, Y_test)
    scores_baseline = backend.to_numpy(scores_baseline)








.. GENERATED FROM PYTHON SOURCE LINES 182-183

Plot histograms

.. GENERATED FROM PYTHON SOURCE LINES 183-191

.. code-block:: default

    bins = np.linspace(min(scores_baseline.min(), scores.min()),
                       max(scores_baseline.max(), scores.max()), 50)
    plt.hist(scores, bins, alpha=0.5, label="MultipleKernelRidgeCV")
    plt.hist(scores_baseline, bins, alpha=0.5, label="KernelRidgeCV")
    plt.xlabel(r"$R^2$ generalization score")
    plt.title("Histogram over targets")
    plt.legend()
    plt.show()



.. image:: /_auto_examples/multiple_kernel_ridge/images/sphx_glr_plot_mkr_sklearn_api_002.png
    :alt: Histogram over targets
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  23.592 seconds)


.. _sphx_glr_download__auto_examples_multiple_kernel_ridge_plot_mkr_sklearn_api.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_mkr_sklearn_api.py <plot_mkr_sklearn_api.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_mkr_sklearn_api.ipynb <plot_mkr_sklearn_api.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
